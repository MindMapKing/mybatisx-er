(()=>{"use strict";var e={857:e=>{e.exports=require("os")}},t={};function a(s){var i=t[s];if(void 0!==i)return i.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,a),r.exports}a.d=(e,t)=>{for(var s in t)a.o(t,s)&&!a.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};a.r(s),a.d(s,{activate:()=>M,deactivate:()=>N});const i=require("vscode");class r{static initialize(){this.outputChannel=i.window.createOutputChannel("MyBatis ER Generator")}static info(e,...t){const a=`[${(new Date).toISOString()}] INFO: ${e}`;console.log(a,...t),this.outputChannel?.appendLine(a)}static warn(e,...t){const a=`[${(new Date).toISOString()}] WARN: ${e}`;console.warn(a,...t),this.outputChannel?.appendLine(a)}static error(e,t,...a){const s=`[${(new Date).toISOString()}] ERROR: ${e}`,i=t?`\n${t.stack}`:"";console.error(s,t,...a),this.outputChannel?.appendLine(s+i)}static debug(e,...t){const a=`[${(new Date).toISOString()}] DEBUG: ${e}`;console.debug(a,...t),this.outputChannel?.appendLine(a)}static show(){this.outputChannel?.show()}static clear(){this.outputChannel?.clear()}static dispose(){this.outputChannel?.dispose()}}const n=class e{constructor(e){this.context=e,this.workspaceState=e.workspaceState,this.globalState=e.globalState,r.info("状态管理器已初始化")}static initialize(t){return e.instance||(e.instance=new e(t)),e.instance}static getInstance(){if(!e.instance)throw new Error("StateManager未初始化，请先调用initialize()");return e.instance}async saveERDiagramData(t){try{await this.workspaceState.update(e.KEYS.ER_DIAGRAM_DATA,{...t,generatedAt:t.generatedAt.toISOString()}),await this.workspaceState.update(e.KEYS.LAST_SCAN_TIME,Date.now()),r.info(`ER图数据已保存，包含${t.entities.length}个实体，${t.relations.length}个关系`)}catch(e){throw r.error("保存ER图数据失败",e),e}}async getERDiagramData(){try{const t=this.workspaceState.get(e.KEYS.ER_DIAGRAM_DATA);if(!t)return;return{...t,generatedAt:new Date(t.generatedAt)}}catch(e){return void r.error("获取ER图数据失败",e)}}async clearERDiagramData(){try{await this.workspaceState.update(e.KEYS.ER_DIAGRAM_DATA,void 0),await this.workspaceState.update(e.KEYS.LAST_SCAN_TIME,void 0),r.info("ER图数据已清除")}catch(e){throw r.error("清除ER图数据失败",e),e}}async saveProjectConfig(t){try{const a={...await this.getProjectConfig(),...t};await this.workspaceState.update(e.KEYS.PROJECT_CONFIG,a),r.info("项目配置已保存",a)}catch(e){throw r.error("保存项目配置失败",e),e}}async getProjectConfig(){try{return{autoRefresh:!0,inferenceStrategies:{naming:!0,xml:!0,annotation:!0,semantic:!0},theme:"auto",exportFormat:"png",...this.workspaceState.get(e.KEYS.PROJECT_CONFIG)}}catch(e){return r.error("获取项目配置失败",e),{autoRefresh:!0,inferenceStrategies:{naming:!0,xml:!0,annotation:!0,semantic:!0},theme:"auto",exportFormat:"png"}}}getLastScanTime(){return this.workspaceState.get(e.KEYS.LAST_SCAN_TIME)}isCacheValid(e=3e5){const t=this.getLastScanTime();return!!t&&Date.now()-t<e}async saveEntityCache(t,a){try{const s=this.workspaceState.get(e.KEYS.WORKSPACE_ENTITIES)||{};s[t]={data:a,timestamp:Date.now()},await this.workspaceState.update(e.KEYS.WORKSPACE_ENTITIES,s)}catch(e){r.error("保存实体缓存失败",e)}}getEntityCache(t){try{const a=(this.workspaceState.get(e.KEYS.WORKSPACE_ENTITIES)||{})[t];if(!a)return;if(Date.now()-a.timestamp>3e5)return;return a.data}catch(e){return void r.error("获取实体缓存失败",e)}}async cleanExpiredCache(){try{const t=this.workspaceState.get(e.KEYS.WORKSPACE_ENTITIES)||{},a=Date.now(),s=3e5,i={};let n=0;for(const[e,r]of Object.entries(t))a-r.timestamp<=s?i[e]=r:n++;n>0&&(await this.workspaceState.update(e.KEYS.WORKSPACE_ENTITIES,i),r.info(`清除了${n}个过期缓存项`))}catch(e){r.error("清除过期缓存失败",e)}}getCurrentWorkspacePath(){const e=i.workspace.workspaceFolders;return e?.[0]?.uri.fsPath}async isMyBatisProject(){if(!this.getCurrentWorkspacePath())return!1;try{const e=await i.workspace.findFiles("**/{*.xml,pom.xml,build.gradle,application.yml,application.properties}","**/node_modules/**",10);for(const t of e){const e=await i.workspace.fs.readFile(t),a=Buffer.from(e).toString("utf8");if(a.includes("mybatis")||a.includes("MyBatis")||a.includes("mybatis-plus")||a.includes("com.baomidou"))return!0}return!1}catch(e){return r.error("检查MyBatis项目失败",e),!1}}async saveGlobalSetting(e,t){try{await this.globalState.update(e,t),r.debug(`全局设置已保存: ${e}`)}catch(e){throw r.error("保存全局设置失败",e),e}}getGlobalSetting(e,t){return this.globalState.get(e,t)}async resetWorkspaceState(){try{const t=Object.values(e.KEYS);for(const e of t)await this.workspaceState.update(e,void 0);r.info("工作空间状态已重置")}catch(e){throw r.error("重置工作空间状态失败",e),e}}getStateStats(){const t=this.getLastScanTime();return{workspacePath:this.getCurrentWorkspacePath(),lastScanTime:t?new Date(t).toISOString():null,cacheValid:this.isCacheValid(),hasERData:!!this.workspaceState.get(e.KEYS.ER_DIAGRAM_DATA)}}};n.KEYS={ER_DIAGRAM_DATA:"erDiagramData",LAST_SCAN_TIME:"lastScanTime",PROJECT_CONFIG:"projectConfig",CACHE_VERSION:"cacheVersion",WORKSPACE_ENTITIES:"workspaceEntities",INFERENCE_CACHE:"inferenceCache"};let o=n;class c{constructor(){this.configChangeListeners=[],i.workspace.onDidChangeConfiguration(this.onConfigurationChanged.bind(this)),r.info("配置管理器已初始化")}static getInstance(){return c.instance||(c.instance=new c),c.instance}getExtensionConfig(){const e=i.workspace.getConfiguration("mybatis-er");return{autoRefresh:e.get("autoRefresh",!0),inferenceStrategies:e.get("inferenceStrategies",{naming:!0,xml:!0,annotation:!0,semantic:!0}),theme:e.get("theme","auto"),exportFormat:e.get("exportFormat","png")}}async updateExtensionConfig(e,t,a){try{const s=i.workspace.getConfiguration("mybatis-er");await s.update(e,t,a||i.ConfigurationTarget.Workspace),r.info(`配置已更新: ${e} = ${JSON.stringify(t)}`)}catch(t){throw r.error(`更新配置失败: ${e}`,t),t}}getWorkspaceConfig(){return{javaHome:this.getJavaConfig("home"),javaSourcePaths:this.getJavaConfig("sourcePaths",[]),includePatterns:this.getFileConfig("include",["**/*.java","**/*.xml"]),excludePatterns:this.getFileConfig("exclude",["**/node_modules/**","**/target/**","**/build/**","**/.git/**"]),tabSize:this.getEditorConfig("tabSize",4),insertSpaces:this.getEditorConfig("insertSpaces",!0),searchMaxResults:this.getSearchConfig("maxResults",1e3),searchTimeout:this.getSearchConfig("timeout",1e4)}}getJavaConfig(e,t){return i.workspace.getConfiguration("java").get(e,t)}getFileConfig(e,t){return i.workspace.getConfiguration("files").get(e,t)}getEditorConfig(e,t){return i.workspace.getConfiguration("editor").get(e,t)}getSearchConfig(e,t){return i.workspace.getConfiguration("search").get(e,t)}getMyBatisConfig(){const e=i.workspace.getConfiguration("mybatis-er");return{parseTimeout:e.get("parseTimeout",3e4),maxFileSize:e.get("maxFileSize",10485760),inferenceTimeout:e.get("inferenceTimeout",1e4),minConfidence:e.get("minConfidence",.6),cacheEnabled:e.get("cacheEnabled",!0),cacheMaxAge:e.get("cacheMaxAge",3e5),maxEntitiesInView:e.get("maxEntitiesInView",500),animationEnabled:e.get("animationEnabled",!0),exportPath:e.get("exportPath",""),exportQuality:e.get("exportQuality",1)}}getPerformanceConfig(){const e=i.workspace.getConfiguration("mybatis-er");return{maxWorkers:e.get("maxWorkers",Math.max(2,Math.floor(a(857).cpus().length/2))),workerTimeout:e.get("workerTimeout",3e4),maxMemoryUsage:e.get("maxMemoryUsage",104857600),gcThreshold:e.get("gcThreshold",.8),maxConcurrentParsing:e.get("maxConcurrentParsing",4),batchSize:e.get("batchSize",50),enableProfiling:e.get("enableProfiling",!1),logLevel:e.get("logLevel","info")}}validateConfig(){const e=[],t=this.getExtensionConfig(),a=this.getMyBatisConfig(),s=this.getPerformanceConfig();"boolean"!=typeof t.autoRefresh&&e.push("autoRefresh必须是布尔值"),["auto","light","dark"].includes(t.theme)||e.push("theme必须是auto、light或dark之一"),["png","svg","pdf","mermaid"].includes(t.exportFormat)||e.push("exportFormat必须是png、svg、pdf或mermaid之一");const i=t.inferenceStrategies;if("object"!=typeof i||null===i)e.push("inferenceStrategies必须是对象");else{const t=["naming","xml","annotation","semantic"];for(const a of t)"boolean"!=typeof i[a]&&e.push(`inferenceStrategies.${a}必须是布尔值`)}return(s.maxWorkers<1||s.maxWorkers>16)&&e.push("maxWorkers必须在1-16之间"),(a.minConfidence<0||a.minConfidence>1)&&e.push("minConfidence必须在0-1之间"),{valid:0===e.length,errors:e}}async resetToDefaults(){try{const e=i.workspace.getConfiguration("mybatis-er"),t=["autoRefresh","inferenceStrategies","theme","exportFormat","parseTimeout","maxFileSize","inferenceTimeout","minConfidence","cacheEnabled","cacheMaxAge","maxEntitiesInView","animationEnabled"];for(const a of t)await e.update(a,void 0,i.ConfigurationTarget.Workspace);r.info("配置已重置为默认值")}catch(e){throw r.error("重置配置失败",e),e}}exportConfig(){return{extension:this.getExtensionConfig(),workspace:this.getWorkspaceConfig(),mybatis:this.getMyBatisConfig(),performance:this.getPerformanceConfig(),timestamp:(new Date).toISOString()}}async importConfig(e){try{if(!e.extension)throw new Error("无效的配置数据");const t=e.extension,a=i.workspace.getConfiguration("mybatis-er");for(const[e,s]of Object.entries(t))await a.update(e,s,i.ConfigurationTarget.Workspace);r.info("配置导入成功")}catch(e){throw r.error("导入配置失败",e),e}}onConfigChanged(e){return this.configChangeListeners.push(e),new i.Disposable((()=>{const t=this.configChangeListeners.indexOf(e);t>=0&&this.configChangeListeners.splice(t,1)}))}onConfigurationChanged(e){if(e.affectsConfiguration("mybatis-er")){const e=this.getExtensionConfig();r.info("配置已变更",e),this.configChangeListeners.forEach((t=>{try{t(e)}catch(e){r.error("配置变更监听器执行失败",e)}}))}}getConfigSummary(){const e=this.validateConfig(),t=this.getExtensionConfig(),a=this.getPerformanceConfig();return{valid:e.valid,errors:e.errors,autoRefresh:t.autoRefresh,enabledStrategies:Object.entries(t.inferenceStrategies).filter((([e,t])=>t)).map((([e,t])=>e)),theme:t.theme,maxWorkers:a.maxWorkers,cacheEnabled:this.getMyBatisConfig().cacheEnabled}}}const l=require("worker_threads"),m=require("path"),h=require("events");var d=(e=>(e.PARSE_JAVA_FILE="PARSE_JAVA_FILE",e.PARSE_XML_FILE="PARSE_XML_FILE",e.PARSE_BATCH_FILES="PARSE_BATCH_FILES",e.INFER_RELATIONS="INFER_RELATIONS",e.VALIDATE_RELATIONS="VALIDATE_RELATIONS",e.GENERATE_DIAGRAM="GENERATE_DIAGRAM",e.EXPORT_DIAGRAM="EXPORT_DIAGRAM",e.PING="PING",e.PONG="PONG",e.TERMINATE="TERMINATE",e.ERROR="ERROR",e.PROGRESS="PROGRESS",e))(d||{}),u=(e=>(e.IDLE="idle",e.BUSY="busy",e.ERROR="error",e.TERMINATED="terminated",e))(u||{});class g extends h.EventEmitter{constructor(e={}){super(),this.workers=new Map,this.workerInfos=new Map,this.taskQueue=[],this.activeTasks=new Map,this.pendingResponses=new Map,this.isShuttingDown=!1,this.config={maxWorkers:Math.max(2,Math.min(8,a(857).cpus().length-1)),workerTimeout:3e4,maxQueueSize:1e3,heartbeatInterval:5e3,maxRetries:3,enableProfiling:!1,...e},this.stats={activeWorkers:0,idleWorkers:0,queuedTasks:0,processingTasks:0,totalProcessedTasks:0,averageQueueTime:0,systemLoad:0},this.startHeartbeat(),r.info(`WorkerManager initialized with ${this.config.maxWorkers} max workers`)}async start(){if(this.isShuttingDown)throw new Error("WorkerManager is shutting down");const e=Math.min(2,this.config.maxWorkers);for(let t=0;t<e;t++)await this.createWorker();r.info(`WorkerManager started with ${e} workers`)}async shutdown(){this.isShuttingDown=!0,this.heartbeatInterval&&clearInterval(this.heartbeatInterval),this.taskQueue=[];for(const[e,t]of this.pendingResponses)clearTimeout(t.timeout),t.reject(new Error("WorkerManager is shutting down"));this.pendingResponses.clear();const e=Array.from(this.workers.values()).map((e=>this.terminateWorker(e)));await Promise.all(e),this.workers.clear(),this.workerInfos.clear(),this.activeTasks.clear(),r.info("WorkerManager shutdown completed")}async submitTask(e,t,a={}){if(this.isShuttingDown)throw new Error("WorkerManager is shutting down");if(this.taskQueue.length>=this.config.maxQueueSize)throw new Error("Task queue is full");const s={id:this.generateTaskId(),type:e,data:t,priority:a.priority||5,timeout:a.timeout||this.config.workerTimeout,retryCount:0,maxRetries:a.maxRetries||this.config.maxRetries,createdAt:Date.now()};return new Promise(((e,t)=>{this.addTaskToQueue(s);const a=setTimeout((()=>{this.pendingResponses.delete(s.id),t(new Error(`Task ${s.id} timed out`))}),s.timeout);this.pendingResponses.set(s.id,{resolve:e,reject:t,timeout:a}),this.processQueue()}))}getStats(){return this.updateStats(),{...this.stats}}getWorkerInfos(){return Array.from(this.workerInfos.values())}async createWorker(){const e=this.generateWorkerId(),t=m.join(__dirname,"workers","worker-thread.js");try{const a=new l.Worker(t,{workerData:{workerId:e,config:this.config}});return this.setupWorkerListeners(a,e),this.workers.set(e,a),this.workerInfos.set(e,{id:e,status:u.IDLE,processedTasks:0,errorCount:0,createdAt:Date.now(),lastActiveAt:Date.now(),averageProcessingTime:0}),await this.sendMessage(e,{id:this.generateMessageId(),type:d.PING,payload:{},timestamp:Date.now()}),this.emit("workerCreated",{workerId:e}),r.debug(`Worker ${e} created`),e}catch(e){throw r.error(`Failed to create worker: ${e}`),e}}setupWorkerListeners(e,t){e.on("message",(e=>{this.handleWorkerMessage(t,e)})),e.on("error",(e=>{this.handleWorkerError(t,e)})),e.on("exit",(e=>{this.handleWorkerExit(t,e)}))}handleWorkerMessage(e,t){const a=this.workerInfos.get(e);if(a)switch(a.lastActiveAt=Date.now(),t.type){case d.PONG:break;case d.PROGRESS:this.emit("progress",t.payload);break;case d.ERROR:this.handleTaskError(e,t);break;default:t.isResponse&&t.responseToId&&this.handleTaskResponse(e,t)}}handleTaskResponse(e,t){const a=t.responseToId,s=this.pendingResponses.get(a),i=this.activeTasks.get(a),r=this.workerInfos.get(e);if(!s||!i||!r)return;clearTimeout(s.timeout),this.pendingResponses.delete(a),this.activeTasks.delete(a),r.status=u.IDLE,r.currentTaskId=void 0,r.processedTasks++;const n=Date.now()-(i.startedAt||i.createdAt);r.averageProcessingTime=(r.averageProcessingTime*(r.processedTasks-1)+n)/r.processedTasks,i.completedAt=Date.now(),this.stats.totalProcessedTasks++;const o=t.payload;o.success?(s.resolve(o.data),this.emit("taskCompleted",{taskId:a,workerId:e,result:o.data})):(s.reject(new Error(o.error||"Task failed")),this.emit("taskFailed",{taskId:a,workerId:e,error:o.error})),this.processQueue()}handleTaskError(e,t){const a=t.payload,s=this.workerInfos.get(e);if(s&&(s.errorCount++,s.status=u.ERROR),a.taskId){const e=this.pendingResponses.get(a.taskId),t=this.activeTasks.get(a.taskId);e&&t&&(t.retryCount<t.maxRetries?(t.retryCount++,this.addTaskToQueue(t),r.warn(`Retrying task ${t.id}, attempt ${t.retryCount}/${t.maxRetries}`)):(clearTimeout(e.timeout),this.pendingResponses.delete(a.taskId),this.activeTasks.delete(a.taskId),e.reject(new Error(a.message))))}r.error(`Worker ${e} error: ${a.message}`),this.emit("workerError",{workerId:e,error:a})}handleWorkerError(e,t){r.error(`Worker ${e} encountered error: ${t.message}`);const a=this.workerInfos.get(e);a&&(a.status=u.ERROR,a.errorCount++),this.recreateWorker(e)}handleWorkerExit(e,t){r.warn(`Worker ${e} exited with code ${t}`),this.workers.delete(e);const a=this.workerInfos.get(e);a&&(a.status=u.TERMINATED),this.isShuttingDown||this.recreateWorker(e)}async recreateWorker(e){try{this.workers.delete(e),this.workerInfos.delete(e),await this.createWorker(),r.info(`Worker ${e} recreated`)}catch(e){r.error(`Failed to recreate worker: ${e}`)}}addTaskToQueue(e){let t=this.taskQueue.length;for(let a=0;a<this.taskQueue.length;a++)if(this.taskQueue[a].priority<e.priority){t=a;break}this.taskQueue.splice(t,0,e),this.stats.queuedTasks=this.taskQueue.length}processQueue(){if(0===this.taskQueue.length)return;const e=this.findIdleWorker();if(!e)return void(this.workers.size<this.config.maxWorkers&&this.createWorker().then((()=>this.processQueue())));const t=this.taskQueue.shift();t&&(this.stats.queuedTasks=this.taskQueue.length,this.assignTaskToWorker(e,t))}findIdleWorker(){for(const[e,t]of this.workerInfos)if(t.status===u.IDLE)return e;return null}assignTaskToWorker(e,t){const a=this.workers.get(e),s=this.workerInfos.get(e);if(!a||!s)return;s.status=u.BUSY,s.currentTaskId=t.id,t.startedAt=Date.now(),this.activeTasks.set(t.id,t),this.stats.processingTasks=this.activeTasks.size;const i={id:this.generateMessageId(),type:t.type,payload:t.data,timestamp:Date.now()};this.sendMessage(e,i),this.emit("taskStarted",{taskId:t.id,workerId:e}),r.debug(`Task ${t.id} assigned to worker ${e}`)}async sendMessage(e,t){const a=this.workers.get(e);if(!a)throw new Error(`Worker ${e} not found`);a.postMessage(t)}async terminateWorker(e){return new Promise((t=>{const a=setTimeout((()=>{e.terminate(),t()}),5e3);e.once("exit",(()=>{clearTimeout(a),t()})),e.postMessage({id:this.generateMessageId(),type:d.TERMINATE,payload:{},timestamp:Date.now()})}))}startHeartbeat(){this.heartbeatInterval=setInterval((()=>{this.performHeartbeat()}),this.config.heartbeatInterval)}performHeartbeat(){const e=Date.now();for(const[t,a]of this.workerInfos){if(e-a.lastActiveAt>this.config.workerTimeout){r.warn(`Worker ${t} appears to be unresponsive`),this.recreateWorker(t);continue}const s=this.workers.get(t);s&&a.status===u.IDLE&&s.postMessage({id:this.generateMessageId(),type:d.PING,payload:{},timestamp:e})}}updateStats(){let e=0,t=0;for(const a of this.workerInfos.values())a.status===u.BUSY?e++:a.status===u.IDLE&&t++;this.stats.activeWorkers=e,this.stats.idleWorkers=t,this.stats.queuedTasks=this.taskQueue.length,this.stats.processingTasks=this.activeTasks.size,this.stats.systemLoad=e/Math.max(1,this.workers.size)*100}generateWorkerId(){return`worker_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}generateTaskId(){return`task_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}generateMessageId(){return`msg_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}}const p=require("fs/promises");class f{constructor(e){this.workspaceRoot=e||this.getWorkspaceRoot(),this.defaultOptions={includePatterns:["**/*.java","**/*.xml"],excludePatterns:["**/node_modules/**","**/target/**","**/build/**","**/out/**","**/bin/**","**/.git/**","**/.vscode/**","**/.idea/**"],maxFileSize:10485760,recursive:!0,includeTests:!1,parseContent:!0,maxDepth:10}}async scanWorkspace(e){const t=Date.now(),a={...this.defaultOptions,...e};r.info("开始扫描工作空间文件...");try{const e={totalFiles:0,javaFileCount:0,xmlFileCount:0,entityCount:0,mapperCount:0,directoriesScanned:0,skippedFiles:0,errorFiles:0},s=[],i=[];await this.scanDirectory(this.workspaceRoot,a,s,i,e,0),a.parseContent&&await this.parseFileContents(s,i,e);const n=Date.now()-t;return r.info(`文件扫描完成: ${e.totalFiles}个文件, 耗时${n}ms`),{javaFiles:s,xmlFiles:i,stats:e,scanTime:n}}catch(e){throw r.error(`文件扫描失败: ${e}`),e}}async scanDirectory(e,t,a,s,i,n){if(!(n>t.maxDepth))try{const r=await p.readdir(e,{withFileTypes:!0});i.directoriesScanned++;for(const o of r){const r=m.join(e,o.name),c=m.relative(this.workspaceRoot,r);this.shouldExclude(c,t.excludePatterns)?i.skippedFiles++:o.isDirectory()?t.recursive&&await this.scanDirectory(r,t,a,s,i,n+1):o.isFile()&&await this.processFile(r,c,t,a,s,i)}}catch(t){r.warn(`扫描目录失败 ${e}: ${t}`),i.errorFiles++}}async processFile(e,t,a,s,i,n){try{const o=m.basename(e),c=m.extname(o).toLowerCase();if(".java"!==c&&".xml"!==c)return;if(!a.includeTests&&this.isTestFile(t))return void n.skippedFiles++;const l=await p.stat(e);if(l.size>a.maxFileSize)return r.warn(`文件过大，跳过: ${t} (${l.size} bytes)`),void n.skippedFiles++;const h={filePath:e,relativePath:t,fileName:o,size:l.size,lastModified:l.mtime.getTime(),fileType:".java"===c?"java":"xml"};".java"===c?(s.push(h),n.javaFileCount++):".xml"===c&&(i.push(h),n.xmlFileCount++),n.totalFiles++}catch(t){r.warn(`处理文件失败 ${e}: ${t}`),n.errorFiles++}}async parseFileContents(e,t,a){r.info("开始解析文件内容...");for(const t of e)try{await this.parseJavaFile(t),t.isEntity&&a.entityCount++}catch(e){r.warn(`解析Java文件失败 ${t.relativePath}: ${e}`),a.errorFiles++}for(const e of t)try{await this.parseXmlFile(e),e.isMapper&&a.mapperCount++}catch(t){r.warn(`解析XML文件失败 ${e.relativePath}: ${t}`),a.errorFiles++}}async parseJavaFile(e){try{const t=await p.readFile(e.filePath,"utf-8"),a=t.match(/package\s+([\w.]+)\s*;/);a&&(e.packageName=a[1]),e.isEntity=this.isEntityClass(t,e.fileName)}catch(e){throw new Error(`读取Java文件失败: ${e}`)}}async parseXmlFile(e){try{const t=await p.readFile(e.filePath,"utf-8"),a=t.match(/namespace\s*=\s*["']([^"']+)["']/);a&&(e.namespace=a[1]),e.isMapper=this.isMapperFile(t,e.fileName)}catch(e){throw new Error(`读取XML文件失败: ${e}`)}}isEntityClass(e,t){const a=["@Entity","@Table","@TableName","@Data","@Component"];for(const t of a)if(e.includes(t))return!0;const s=[/Entity\.java$/,/Model\.java$/,/DO\.java$/,/PO\.java$/,/VO\.java$/,/DTO\.java$/];for(const e of s)if(e.test(t))return!0;const i=e.match(/public\s+class\s+(\w+)/);if(i){i[1];const t=/public\s+\w+\s+get\w+\s*\(/.test(e),a=/public\s+void\s+set\w+\s*\(/.test(e);if(t&&a)return!0}return!1}isMapperFile(e,t){if(t.toLowerCase().includes("mapper"))return!0;const a=["<mapper","<select","<insert","<update","<delete","<resultMap"];for(const t of a)if(e.includes(t))return!0;return!1}isTestFile(e){return[/\/test\//,/\/tests\//,/Test\.java$/,/Tests\.java$/,/TestCase\.java$/,/_test\.java$/,/_tests\.java$/].some((t=>t.test(e)))}shouldExclude(e,t){return t.some((t=>new RegExp(t.replace(/\*\*/g,".*").replace(/\*/g,"[^/]*").replace(/\?/g,"[^/]")).test(e)))}getWorkspaceRoot(){const e=i.workspace.workspaceFolders;if(!e||0===e.length)throw new Error("没有打开的工作空间");return e[0].uri.fsPath}createFileWatcher(e){const t=i.workspace.createFileSystemWatcher(new i.RelativePattern(this.workspaceRoot,"**/*.{java,xml}")),a=[t.onDidCreate((t=>e("created",t.fsPath))),t.onDidChange((t=>e("changed",t.fsPath))),t.onDidDelete((t=>e("deleted",t.fsPath))),t];return i.Disposable.from(...a)}async getFileContent(e){try{return await p.readFile(e,"utf-8")}catch(t){throw new Error(`读取文件失败 ${e}: ${t}`)}}async fileExists(e){try{return await p.access(e),!0}catch{return!1}}async getFileStats(e){return await p.stat(e)}async getFileContents(e){const t=new Map,a=e.map((async e=>{try{const a=await this.getFileContent(e);t.set(e,a)}catch(t){r.warn(`读取文件失败 ${e}: ${t}`)}}));return await Promise.all(a),t}filterFiles(e,t){return e.filter((e=>!(t.fileType&&e.fileType!==t.fileType||void 0!==t.isEntity&&e.isEntity!==t.isEntity||void 0!==t.isMapper&&e.isMapper!==t.isMapper||t.packageName&&e.packageName!==t.packageName||t.namespace&&e.namespace!==t.namespace||t.minSize&&e.size<t.minSize||t.maxSize&&e.size>t.maxSize||t.modifiedAfter&&e.lastModified<t.modifiedAfter)))}}class w{generateERDiagram(e){const{entities:t,relations:a}=e;if(!t||0===t.length)return this.generateEmptyDiagram();let s="erDiagram\n";return s+=this.generateEntities(t),a&&a.length>0&&(s+="\n",s+=this.generateRelations(a)),s}generateEmptyDiagram(){return'erDiagram\n    NO_ENTITIES {\n        string message "未找到MyBatis实体类"\n        string suggestion "请确保项目包含@TableName等注解的实体类"\n    }'}generateEntities(e){return e.map((e=>this.generateEntity(e))).join("\n\n")}generateEntity(e){let t=`    ${this.sanitizeTableName(e.tableName)} {\n`;e.fields&&e.fields.length>0?t+=e.fields.map((e=>this.generateField(e))).join("\n"):t+='        string placeholder "暂无字段信息"\n',t+="    }";const a=this.generateEntityComment(e);return a&&(t+=` %% ${a}`),t}generateField(e){return`        ${this.mapJavaTypeToDBType(e.javaType)} ${this.sanitizeColumnName(e.columnName)}${this.generateFieldConstraints(e)}`}generateFieldConstraints(e){const t=[];return e.isPrimaryKey&&t.push("PK"),e.isNotNull&&t.push("NOT NULL"),e.isUnique&&t.push("UNIQUE"),e.defaultValue&&t.push(`DEFAULT "${e.defaultValue}"`),e.comment&&t.push(`"${e.comment}"`),t.length>0?` ${t.join(" ")}`:""}generateEntityComment(e){const t=[];e.className&&t.push(`Java类: ${e.className}`),e.comment&&t.push(e.comment);const a=e.annotations.find((e=>"TableName"===e.name||"Table"===e.name));return a&&t.push(`注解: @${a.name}`),t.join(", ")}generateRelations(e){return e.map((e=>this.generateRelation(e))).join("\n")}generateRelation(e){const t=this.sanitizeTableName(e.fromTable),a=this.sanitizeTableName(e.toTable);let s=`    ${t} ${this.getRelationshipSymbol(e.type)} ${a}`;(e.fromField||e.toField)&&(s+=` : ${this.generateRelationLabel(e)}`);const i=this.generateRelationComment(e);return i&&(s+=` %% ${i}`),s}getRelationshipSymbol(e){switch(e.toLowerCase()){case"one-to-one":default:return"||--||";case"one-to-many":return"||--o{";case"many-to-one":return"}o--||";case"many-to-many":return"}o--o{"}}generateRelationLabel(e){const t=[];return e.fromField&&t.push(e.fromField),e.toField&&e.toField!==e.fromField&&t.push(e.toField),t.join("-")}generateRelationComment(e){const t=[];return void 0!==e.confidence&&t.push(`置信度: ${(100*e.confidence).toFixed(1)}%`),e.source&&t.push(`来源: ${e.source}`),e.description&&t.push(e.description),t.join(", ")}mapJavaTypeToDBType(e){return{String:"varchar",Integer:"int",int:"int",Long:"bigint",long:"bigint",Double:"double",double:"double",Float:"float",float:"float",Boolean:"boolean",boolean:"boolean",Date:"datetime",LocalDate:"date",LocalDateTime:"datetime",LocalTime:"time",Timestamp:"timestamp",BigDecimal:"decimal","byte[]":"blob","Byte[]":"blob"}[e.split("<")[0]]||"varchar"}sanitizeTableName(e){return e?e.replace(/[^a-zA-Z0-9_]/g,"_").toUpperCase():"UNKNOWN_TABLE"}sanitizeColumnName(e){return e?e.replace(/[^a-zA-Z0-9_]/g,"_").toLowerCase():"unknown_column"}generateThemedDiagram(e,t="default"){const a=this.generateERDiagram(e);return`%%{init: ${this.getThemeConfig(t)}}%%\n${a}`}getThemeConfig(e){const t={default:'{"theme": "default"}',dark:'{"theme": "dark"}',forest:'{"theme": "forest"}',neutral:'{"theme": "neutral"}'};return t[e]||t.default}generateStatistics(e){const{entities:t,relations:a}=e,s={entityCount:t.length,relationCount:a.length,fieldCount:t.reduce(((e,t)=>e+t.fields.length),0),relationTypes:{}};return a.forEach((e=>{const t=e.type;s.relationTypes[t]=(s.relationTypes[t]||0)+1})),s}validateMermaidCode(e){const t=[],a=[];e.trim().startsWith("erDiagram")||t.push('Mermaid代码必须以"erDiagram"开头');const s=e.match(/\s+\w+\s*\{[^}]*\}/g);s&&0!==s.length||a.push("未找到实体定义");const i=e.match(/\s+\w+\s+\|\|--[o\|]\{?\s+\w+/g);return i&&0!==i.length||a.push("未找到关系定义"),{isValid:0===t.length,errors:t,warnings:a}}}const y={entities:[{className:"User",tableName:"user",comment:"用户表",filePath:"/src/main/java/com/example/entity/User.java",annotations:[{name:"TableName",attributes:{value:"user"}}],fields:[{fieldName:"id",columnName:"id",javaType:"Long",isPrimaryKey:!0,isNotNull:!0,isUnique:!0,comment:"用户ID"},{fieldName:"username",columnName:"username",javaType:"String",isPrimaryKey:!1,isNotNull:!0,isUnique:!0,comment:"用户名"},{fieldName:"email",columnName:"email",javaType:"String",isPrimaryKey:!1,isNotNull:!0,isUnique:!0,comment:"邮箱"},{fieldName:"createTime",columnName:"create_time",javaType:"LocalDateTime",isPrimaryKey:!1,isNotNull:!0,isUnique:!1,comment:"创建时间"}]},{className:"Order",tableName:"order",comment:"订单表",filePath:"/src/main/java/com/example/entity/Order.java",annotations:[{name:"TableName",attributes:{value:"order"}}],fields:[{fieldName:"id",columnName:"id",javaType:"Long",isPrimaryKey:!0,isNotNull:!0,isUnique:!0,comment:"订单ID"},{fieldName:"userId",columnName:"user_id",javaType:"Long",isPrimaryKey:!1,isNotNull:!0,isUnique:!1,comment:"用户ID"},{fieldName:"orderNo",columnName:"order_no",javaType:"String",isPrimaryKey:!1,isNotNull:!0,isUnique:!0,comment:"订单号"},{fieldName:"totalAmount",columnName:"total_amount",javaType:"BigDecimal",isPrimaryKey:!1,isNotNull:!0,isUnique:!1,comment:"总金额"},{fieldName:"status",columnName:"status",javaType:"Integer",isPrimaryKey:!1,isNotNull:!0,isUnique:!1,comment:"订单状态"},{fieldName:"createTime",columnName:"create_time",javaType:"LocalDateTime",isPrimaryKey:!1,isNotNull:!0,isUnique:!1,comment:"创建时间"}]},{className:"OrderItem",tableName:"order_item",comment:"订单项表",filePath:"/src/main/java/com/example/entity/OrderItem.java",annotations:[{name:"TableName",attributes:{value:"order_item"}}],fields:[{fieldName:"id",columnName:"id",javaType:"Long",isPrimaryKey:!0,isNotNull:!0,isUnique:!0,comment:"订单项ID"},{fieldName:"orderId",columnName:"order_id",javaType:"Long",isPrimaryKey:!1,isNotNull:!0,isUnique:!1,comment:"订单ID"},{fieldName:"productId",columnName:"product_id",javaType:"Long",isPrimaryKey:!1,isNotNull:!0,isUnique:!1,comment:"产品ID"},{fieldName:"quantity",columnName:"quantity",javaType:"Integer",isPrimaryKey:!1,isNotNull:!0,isUnique:!1,comment:"数量"},{fieldName:"price",columnName:"price",javaType:"BigDecimal",isPrimaryKey:!1,isNotNull:!0,isUnique:!1,comment:"单价"}]},{className:"Product",tableName:"product",comment:"产品表",filePath:"/src/main/java/com/example/entity/Product.java",annotations:[{name:"TableName",attributes:{value:"product"}}],fields:[{fieldName:"id",columnName:"id",javaType:"Long",isPrimaryKey:!0,isNotNull:!0,isUnique:!0,comment:"产品ID"},{fieldName:"name",columnName:"name",javaType:"String",isPrimaryKey:!1,isNotNull:!0,isUnique:!1,comment:"产品名称"},{fieldName:"description",columnName:"description",javaType:"String",isPrimaryKey:!1,isNotNull:!1,isUnique:!1,comment:"产品描述"},{fieldName:"price",columnName:"price",javaType:"BigDecimal",isPrimaryKey:!1,isNotNull:!0,isUnique:!1,comment:"价格"},{fieldName:"stock",columnName:"stock",javaType:"Integer",isPrimaryKey:!1,isNotNull:!0,isUnique:!1,comment:"库存"}]}],relations:[{fromTable:"user",toTable:"order",fromField:"id",toField:"user_id",type:"one-to-many",confidence:.95,source:"naming-convention",description:"用户与订单的一对多关系"},{fromTable:"order",toTable:"order_item",fromField:"id",toField:"order_id",type:"one-to-many",confidence:.95,source:"naming-convention",description:"订单与订单项的一对多关系"},{fromTable:"product",toTable:"order_item",fromField:"id",toField:"product_id",type:"one-to-many",confidence:.95,source:"naming-convention",description:"产品与订单项的一对多关系"}]};class E{constructor(){this.testResults=new Map}static getInstance(){return E.instance||(E.instance=new E),E.instance}startTest(e){const t=new k(e);return r.info(`开始性能测试: ${e}`),t}recordResult(e){this.testResults.set(e.testName,e),r.info(`性能测试完成: ${e.testName}`,{duration:e.duration,memoryUsed:e.memoryUsed,itemsProcessed:e.itemsProcessed})}getTestReport(){const e=Array.from(this.testResults.values());return{totalTests:e.length,results:e,summary:{totalDuration:e.reduce(((e,t)=>e+t.duration),0),averageDuration:e.length>0?e.reduce(((e,t)=>e+t.duration),0)/e.length:0,maxMemoryUsed:Math.max(...e.map((e=>e.memoryUsed))),totalItemsProcessed:e.reduce(((e,t)=>e+t.itemsProcessed),0)}}}async showPerformanceReport(){const e=this.getTestReport(),t=`\n性能测试报告：\n\n总测试数: ${e.totalTests}\n总耗时: ${e.summary.totalDuration.toFixed(2)}ms\n平均耗时: ${e.summary.averageDuration.toFixed(2)}ms\n最大内存使用: ${(e.summary.maxMemoryUsed/1024/1024).toFixed(2)}MB\n总处理项目: ${e.summary.totalItemsProcessed}\n\n详细结果:\n${e.results.map((e=>`- ${e.testName}: ${e.duration.toFixed(2)}ms, ${(e.memoryUsed/1024/1024).toFixed(2)}MB, ${e.itemsProcessed}项`)).join("\n")}\n        `.trim();await i.window.showInformationMessage(t,{modal:!0})}clearResults(){this.testResults.clear(),r.info("性能测试结果已清除")}async runBenchmarkSuite(){r.info("开始运行基准测试套件"),this.clearResults();const e=this.startTest("内存使用基准");await this.simulateMemoryUsage(),e.finish(100);const t=this.startTest("解析速度基准");await this.simulateParsingLoad(),t.finish(500);const a=this.startTest("关系推断基准");await this.simulateInferenceLoad(),a.finish(200);const s=this.getTestReport();return r.info("基准测试套件完成",s.summary),s}async simulateMemoryUsage(){const e=[];for(let t=0;t<1e4;t++)e.push({id:t,name:`Entity_${t}`,fields:Array.from({length:10},((e,a)=>({name:`field_${a}`,type:"String",value:`value_${t}_${a}`})))});await new Promise((e=>setTimeout(e,100))),e.length=0}async simulateParsingLoad(){for(let e=0;e<500;e++)Array.from({length:10},((e,t)=>`@Column(name = "field_${t}") private String field${t};`)).join("\n"),await new Promise((e=>setTimeout(e,1)))}async simulateInferenceLoad(){for(let e=0;e<200;e++){const t=Array.from({length:50},((t,a)=>({name:`Entity${a}`,fields:["id","name",`entity${e}_id`]})));for(const e of t)for(const t of e.fields)t.endsWith("_id")&&Math.random();await new Promise((e=>setTimeout(e,1)))}}}class k{constructor(e){this.testName=e,this.startTime=performance.now(),this.startMemory=this.getMemoryUsage()}finish(e=0){const t=performance.now(),a=this.getMemoryUsage(),s={testName:this.testName,duration:t-this.startTime,memoryUsed:a-this.startMemory,itemsProcessed:e,timestamp:new Date};return E.getInstance().recordResult(s),s}getMemoryUsage(){return process.memoryUsage?process.memoryUsage().heapUsed:0}}class v{constructor(e,t,a){this.stateManager=e,this.configManager=t,this.webviewProvider=a,this.workerManager=new g,this.fileScanner=new f,this.mermaidGenerator=new w}async initialize(){try{await this.workerManager.start(),r.info("Worker管理器初始化完成")}catch(e){throw r.error("Worker管理器初始化失败",e),e}}async dispose(){try{await this.workerManager.shutdown(),r.info("Worker管理器已关闭")}catch(e){r.error("Worker管理器关闭失败",e)}}async handleGenerateERDiagram(){if(i.workspace.workspaceFolders)try{if(!await this.stateManager.isMyBatisProject()&&"继续"!==await i.window.showWarningMessage("当前工作空间似乎不是MyBatis项目，是否继续？","继续","取消"))return;const e=this.configManager.getExtensionConfig();if(r.info("开始生成ER图",{workspace:this.stateManager.getCurrentWorkspacePath(),config:this.configManager.getConfigSummary()}),e.autoRefresh&&this.stateManager.isCacheValid()&&"使用缓存"===await i.window.showInformationMessage("发现有效缓存，是否使用缓存数据？","使用缓存","重新生成")&&await this.stateManager.getERDiagramData())return r.info("使用缓存数据生成ER图"),void i.window.showInformationMessage("ER图生成完成（使用缓存）！");await i.window.withProgress({location:i.ProgressLocation.Notification,title:"正在生成ER图...",cancellable:!0},(async(e,t)=>{await this.performERGeneration(e,t)})),r.info("ER图生成完成"),i.window.showInformationMessage("ER图生成完成！")}catch(e){r.error("生成ER图失败",e),i.window.showErrorMessage(`生成ER图失败: ${e}`)}else i.window.showWarningMessage("请先打开一个工作空间")}async performERGeneration(e,t){e.report({increment:0,message:"扫描项目文件..."}),await this.stateManager.cleanExpiredCache();const a=await this.fileScanner.scanWorkspace({includeTests:this.configManager.getExtensionConfig().includeTestFiles});if(r.info(`文件扫描完成: ${a.stats.totalFiles}个文件`),e.report({increment:20,message:`发现${a.stats.entityCount}个实体类...`}),t.isCancellationRequested)throw new Error("用户取消了操作");const s=[];for(const e of a.javaFiles.filter((e=>e.isEntity))){if(t.isCancellationRequested)throw new Error("用户取消了操作");try{const t=await this.fileScanner.getFileContent(e.filePath),a=await this.workerManager.submitTask(d.PARSE_JAVA_FILE,{filePath:e.filePath,content:t,fileType:"java",options:{parseMethodBodies:!1}});s.push(a)}catch(t){r.warn(`解析Java文件失败: ${e.filePath}`,t)}}e.report({increment:25,message:"解析XML映射文件..."});const i=[];for(const e of a.xmlFiles.filter((e=>e.isMapper))){if(t.isCancellationRequested)throw new Error("用户取消了操作");try{const t=await this.fileScanner.getFileContent(e.filePath),a=await this.workerManager.submitTask(d.PARSE_XML_FILE,{filePath:e.filePath,content:t,fileType:"xml"});i.push(a)}catch(t){r.warn(`解析XML文件失败: ${e.filePath}`,t)}}if(e.report({increment:25,message:"推断实体关系..."}),t.isCancellationRequested)throw new Error("用户取消了操作");const n=s.flatMap((e=>e.entity?[e.entity]:[])),o=i.flatMap((e=>e.result?[e.result]:[])),c=await this.workerManager.submitTask(d.INFER_RELATIONS,{entities:n,xmlResults:o,strategies:this.configManager.getExtensionConfig().inferenceStrategies,minConfidence:.7});if(e.report({increment:20,message:"生成ER图..."}),t.isCancellationRequested)throw new Error("用户取消了操作");await this.workerManager.submitTask(d.GENERATE_DIAGRAM,{entities:n,relations:c.relations||[],options:{theme:this.configManager.getExtensionConfig().theme,format:"mermaid",includeFields:!0,includeRelations:!0}});const l={entities:n,relations:c.relations||[],generatedAt:new Date,projectPath:this.stateManager.getCurrentWorkspacePath()||""};await this.stateManager.saveERDiagramData(l),this.webviewProvider.updateDiagram(l),e.report({increment:10,message:"完成"}),r.info("ER图生成完成",{entityCount:n.length,relationCount:c.relations?.length||0,scanStats:a.stats})}async handleRefreshERDiagram(){try{r.info("开始刷新ER图"),await this.stateManager.clearERDiagramData(),await this.handleGenerateERDiagram(),r.info("ER图刷新完成")}catch(e){r.error("刷新ER图失败",e),i.window.showErrorMessage(`刷新ER图失败: ${e}`)}}async handleExportERDiagram(){try{if(!await this.stateManager.getERDiagramData())return"生成ER图"===await i.window.showInformationMessage("没有找到ER图数据，是否先生成ER图？","生成ER图","取消")?void await this.handleGenerateERDiagram():void 0;const e=this.configManager.getExtensionConfig(),t=["PNG","SVG","PDF","Mermaid文本"],a=e.exportFormat.toUpperCase(),s=await i.window.showQuickPick(t,{placeHolder:"选择导出格式",value:a});if(s){r.info(`开始导出ER图为${s}格式`);const e=await i.window.showSaveDialog({defaultUri:i.Uri.file(`er-diagram.${s.toLowerCase()}`),filters:{[s]:[s.toLowerCase()]}});e&&(r.info(`ER图将导出到: ${e.fsPath}`),i.window.showInformationMessage(`导出为${s}格式功能开发中...`))}}catch(e){r.error("导出ER图失败",e),i.window.showErrorMessage(`导出ER图失败: ${e}`)}}async handleOpenSettings(){try{r.info("打开扩展设置");const e=this.configManager.getConfigSummary(),t=this.stateManager.getStateStats();r.info("当前配置摘要",e),r.info("当前状态统计",t),await i.commands.executeCommand("workbench.action.openSettings","mybatis-er")}catch(e){r.error("打开设置失败",e),i.window.showErrorMessage(`打开设置失败: ${e}`)}}async handleShowStatus(){try{const e=this.configManager.getConfigSummary(),t=this.stateManager.getStateStats(),a=await this.stateManager.getERDiagramData(),s={workspace:t.workspacePath||"未打开工作空间",lastScan:t.lastScanTime||"从未扫描",cacheValid:t.cacheValid?"有效":"无效",hasERData:t.hasERData?"是":"否",entitiesCount:a?.entities.length||0,relationsCount:a?.relations.length||0,configValid:e.valid?"有效":"无效",enabledStrategies:e.enabledStrategies.join(", ")||"无"},n=`\nMyBatis ER Generator 状态信息：\n\n工作空间: ${s.workspace}\n最后扫描: ${s.lastScan}\n缓存状态: ${s.cacheValid}\nER图数据: ${s.hasERData}\n实体数量: ${s.entitiesCount}\n关系数量: ${s.relationsCount}\n配置状态: ${s.configValid}\n启用策略: ${s.enabledStrategies}\n            `.trim();await i.window.showInformationMessage(n,{modal:!0}),r.info("显示状态信息",s)}catch(e){r.error("显示状态信息失败",e),i.window.showErrorMessage(`显示状态信息失败: ${e}`)}}async handleClearCache(){try{"确定"===await i.window.showWarningMessage("确定要清除所有缓存数据吗？这将删除已保存的ER图数据。","确定","取消")&&(await this.stateManager.resetWorkspaceState(),i.window.showInformationMessage("缓存已清除"),r.info("用户手动清除了缓存"))}catch(e){r.error("清除缓存失败",e),i.window.showErrorMessage(`清除缓存失败: ${e}`)}}async handleTestWebView(){try{r.info("加载测试数据到WebView"),this.mermaidGenerator.generateERDiagram(y),this.webviewProvider.updateDiagram(y),i.window.showInformationMessage("测试数据已加载到ER图视图！")}catch(e){r.error("加载测试数据失败",e),i.window.showErrorMessage(`加载测试数据失败: ${e}`)}}async handlePerformanceBenchmark(){try{r.info("开始运行性能基准测试"),await i.window.withProgress({location:i.ProgressLocation.Notification,title:"正在运行性能基准测试...",cancellable:!1},(async e=>{e.report({increment:0,message:"初始化测试环境..."});const t=E.getInstance();e.report({increment:30,message:"运行基准测试套件..."}),await t.runBenchmarkSuite(),e.report({increment:100,message:"测试完成"}),await t.showPerformanceReport()})),r.info("性能基准测试完成")}catch(e){r.error("性能基准测试失败",e),i.window.showErrorMessage(`性能基准测试失败: ${e}`)}}}class T{constructor(e,t){this._extensionUri=e,this._context=t}resolveWebviewView(e,t,a){this._view=e,e.webview.options={enableScripts:!0,localResourceRoots:[this._extensionUri]},e.webview.html=this._getHtmlForWebview(e.webview),e.webview.onDidReceiveMessage((e=>{switch(e.type){case"exportDiagram":this._exportDiagram(e.format);break;case"refreshDiagram":this._refreshDiagram();break;case"searchEntities":this._searchEntities(e.query);break;case"filterRelations":this._filterRelations(e.filter)}}),void 0,this._context.subscriptions)}updateDiagram(e){this._data=e,this._view&&this._view.webview.postMessage({type:"updateDiagram",data:e})}showLoading(e="正在生成ER图..."){this._view&&this._view.webview.postMessage({type:"showLoading",message:e})}showError(e){this._view&&this._view.webview.postMessage({type:"showError",error:e})}async _exportDiagram(e){if(this._data)try{const t=await i.window.showSaveDialog({defaultUri:i.Uri.file(`er-diagram.${e}`),filters:{[e.toUpperCase()]:[e]}});t&&this._view?.webview.postMessage({type:"exportToFile",format:e,path:t.fsPath})}catch(e){i.window.showErrorMessage(`导出失败: ${e}`)}else i.window.showWarningMessage("没有可导出的ER图数据")}async _refreshDiagram(){try{this.showLoading("正在刷新ER图..."),await i.commands.executeCommand("mybatis-er.generate")}catch(e){this.showError(`刷新失败: ${e}`)}}_searchEntities(e){this._view&&this._view.webview.postMessage({type:"searchResults",query:e,results:this._performSearch(e)})}_filterRelations(e){this._view&&this._view.webview.postMessage({type:"filterResults",filter:e,data:this._applyFilter(e)})}_performSearch(e){if(!this._data||!e.trim())return[];const t=e.toLowerCase();return this._data.entities.filter((e=>e.tableName.toLowerCase().includes(t)||e.className.toLowerCase().includes(t)||e.fields.some((e=>e.fieldName.toLowerCase().includes(t)||e.columnName.toLowerCase().includes(t)))))}_applyFilter(e){if(!this._data)return{entities:[],relations:[]};let t=this._data.entities,a=this._data.relations;return e.entityType&&(t=t.filter((t=>t.annotations.some((t=>t.name===e.entityType))))),e.relationType&&(a=a.filter((t=>t.type===e.relationType))),{entities:t,relations:a}}_getHtmlForWebview(e){const t=e.asWebviewUri(i.Uri.joinPath(this._extensionUri,"media","main.js")),a=e.asWebviewUri(i.Uri.joinPath(this._extensionUri,"media","mermaid-loader.js")),s=e.asWebviewUri(i.Uri.joinPath(this._extensionUri,"media","reset.css")),r=e.asWebviewUri(i.Uri.joinPath(this._extensionUri,"media","vscode.css")),n=e.asWebviewUri(i.Uri.joinPath(this._extensionUri,"media","main.css")),o=function(){let e="";const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(let a=0;a<32;a++)e+=t.charAt(Math.floor(62*Math.random()));return e}();return`<!DOCTYPE html>\n            <html lang="zh-CN">\n            <head>\n                <meta charset="UTF-8">\n                <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource}; script-src 'nonce-${o}' 'unsafe-eval' https://cdn.jsdelivr.net; img-src ${e.cspSource} https:; connect-src https:;">\n                <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                \n                <link href="${s}" rel="stylesheet">\n                <link href="${r}" rel="stylesheet">\n                <link href="${n}" rel="stylesheet">\n                \n                <title>MyBatis ER 图</title>\n            </head>\n            <body>\n                \x3c!-- 工具栏 --\x3e\n                <div class="toolbar">\n                    <div class="toolbar-group">\n                        <button id="refreshBtn" class="toolbar-btn" title="刷新ER图">\n                            <span class="codicon codicon-refresh"></span>\n                            刷新\n                        </button>\n                        <button id="exportBtn" class="toolbar-btn" title="导出ER图">\n                            <span class="codicon codicon-export"></span>\n                            导出\n                        </button>\n                    </div>\n                    \n                    <div class="toolbar-group">\n                        <input type="text" id="searchInput" placeholder="搜索实体或字段..." class="search-input">\n                        <button id="searchBtn" class="toolbar-btn" title="搜索">\n                            <span class="codicon codicon-search"></span>\n                        </button>\n                    </div>\n                    \n                    <div class="toolbar-group">\n                        <select id="filterSelect" class="filter-select">\n                            <option value="">全部关系</option>\n                            <option value="one-to-one">一对一</option>\n                            <option value="one-to-many">一对多</option>\n                            <option value="many-to-one">多对一</option>\n                            <option value="many-to-many">多对多</option>\n                        </select>\n                    </div>\n                </div>\n                \n                \x3c!-- 主要内容区域 --\x3e\n                <div class="main-content">\n                    \x3c!-- 侧边栏 --\x3e\n                    <div class="sidebar">\n                        <div class="sidebar-section">\n                            <h3>实体列表</h3>\n                            <div id="entityList" class="entity-list"></div>\n                        </div>\n                        \n                        <div class="sidebar-section">\n                            <h3>关系统计</h3>\n                            <div id="relationStats" class="relation-stats"></div>\n                        </div>\n                    </div>\n                    \n                    \x3c!-- ER图画布 --\x3e\n                    <div class="diagram-container">\n                        <div id="loadingIndicator" class="loading-indicator" style="display: none;">\n                            <div class="loading-spinner"></div>\n                            <div class="loading-text">正在生成ER图...</div>\n                        </div>\n                        \n                        <div id="errorIndicator" class="error-indicator" style="display: none;">\n                            <div class="error-icon">⚠️</div>\n                            <div class="error-text"></div>\n                        </div>\n                        \n                        <div id="diagramCanvas" class="diagram-canvas"></div>\n                    </div>\n                </div>\n                \n                \x3c!-- 导出对话框 --\x3e\n                <div id="exportModal" class="modal" style="display: none;">\n                    <div class="modal-content">\n                        <div class="modal-header">\n                            <h3>导出ER图</h3>\n                            <button id="closeModal" class="close-btn">&times;</button>\n                        </div>\n                        <div class="modal-body">\n                            <div class="export-options">\n                                <label>\n                                    <input type="radio" name="exportFormat" value="png" checked>\n                                    PNG 图片\n                                </label>\n                                <label>\n                                    <input type="radio" name="exportFormat" value="svg">\n                                    SVG 矢量图\n                                </label>\n                                <label>\n                                    <input type="radio" name="exportFormat" value="pdf">\n                                    PDF 文档\n                                </label>\n                            </div>\n                        </div>\n                        <div class="modal-footer">\n                            <button id="confirmExport" class="btn btn-primary">导出</button>\n                            <button id="cancelExport" class="btn btn-secondary">取消</button>\n                        </div>\n                    </div>\n                </div>\n                \n                <script nonce="${o}" src="${a}"><\/script>\n                <script nonce="${o}" src="${t}"><\/script>\n            </body>\n            </html>`}}let R,b,C,S;async function M(e){r.initialize(),R=o.initialize(e),b=c.getInstance(),S=new T(e.extensionUri,e),e.subscriptions.push(i.window.registerWebviewViewProvider(T.viewType,S)),C=new v(R,b,S);try{await C.initialize(),r.info("Worker管理器初始化完成")}catch(e){return r.error("Worker管理器初始化失败",e),void i.window.showErrorMessage(`Worker管理器初始化失败: ${e}`)}r.info("MyBatis ER Generator 扩展已激活");const t=b.validateConfig();t.valid||(r.warn("配置验证失败",t.errors),i.window.showWarningMessage(`配置存在问题: ${t.errors.join(", ")}`));const a=i.commands.registerCommand("mybatis-er.generate",(()=>C.handleGenerateERDiagram())),s=i.commands.registerCommand("mybatis-er.refresh",(()=>C.handleRefreshERDiagram())),n=i.commands.registerCommand("mybatis-er.export",(()=>C.handleExportERDiagram())),l=i.commands.registerCommand("mybatis-er.settings",(()=>C.handleOpenSettings())),m=i.commands.registerCommand("mybatis-er.status",(()=>C.handleShowStatus())),h=i.commands.registerCommand("mybatis-er.clearCache",(()=>C.handleClearCache())),d=i.commands.registerCommand("mybatis-er.testWebView",(()=>C.handleTestWebView())),u=i.commands.registerCommand("mybatis-er.performanceBenchmark",(()=>C.handlePerformanceBenchmark())),g=b.onConfigChanged((e=>{r.info("配置已变更，重新应用设置",e)})),p=i.workspace.onDidChangeWorkspaceFolders((async e=>{r.info("工作空间已变更",{added:e.added.length,removed:e.removed.length}),e.removed.length>0&&await R.resetWorkspaceState()}));e.subscriptions.push(a,s,n,l,m,h,d,u,g,p,{dispose:()=>C.dispose()});const f=b.getConfigSummary(),w=R.getStateStats();i.window.showInformationMessage("MyBatis ER Generator 已就绪！"),r.info("扩展激活完成，所有命令已注册",{config:f,state:w})}async function N(){r.info("MyBatis ER Generator 扩展正在停用..."),C&&await C.dispose(),r.info("MyBatis ER Generator 扩展已停用"),r.dispose()}T.viewType="mybatis-er.erDiagramView",module.exports=s})();
//# sourceMappingURL=extension.js.map