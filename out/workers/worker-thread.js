(()=>{"use strict";const e=require("worker_threads");var t=(e=>(e.PARSE_JAVA_FILE="PARSE_JAVA_FILE",e.PARSE_XML_FILE="PARSE_XML_FILE",e.PARSE_BATCH_FILES="PARSE_BATCH_FILES",e.INFER_RELATIONS="INFER_RELATIONS",e.VALIDATE_RELATIONS="VALIDATE_RELATIONS",e.GENERATE_DIAGRAM="GENERATE_DIAGRAM",e.EXPORT_DIAGRAM="EXPORT_DIAGRAM",e.PING="PING",e.PONG="PONG",e.TERMINATE="TERMINATE",e.ERROR="ERROR",e.PROGRESS="PROGRESS",e))(t||{}),a=(e=>(e.TIMEOUT="timeout",e.PARSE_ERROR="parse_error",e.MEMORY_ERROR="memory_error",e.NETWORK_ERROR="network_error",e.VALIDATION_ERROR="validation_error",e.UNKNOWN_ERROR="unknown_error",e))(a||{});const s=(e,...t)=>console.log(`[DEBUG] ${e}`,...t),n=(e,...t)=>console.warn(`[WARN] ${e}`,...t),r=class e{async parseJavaFile(e,t,a={}){const r={parseMethodBodies:!1,includeComments:!0,parseImports:!0,maxFileSize:10485760,...a};try{if(s(`开始解析Java文件: ${e}`),t.length>r.maxFileSize)throw new Error(`文件过大: ${t.length} bytes`);let a=t;r.includeComments||(a=this.removeComments(t));const i=this.extractPackageName(a),o=this.extractClassName(a);if(!o)return n(`无法提取类名: ${e}`),null;if(!this.isEntityClass(a))return s(`非实体类，跳过: ${o}`),null;const l=this.extractClassAnnotations(a),c=this.extractTableName(a,o,l),d=this.extractFields(a,r),m={className:o,packageName:i||"",tableName:c,fields:d,annotations:l,filePath:e,isEntity:!0};return s(`Java文件解析完成: ${o}, 字段数: ${d.length}`),m}catch(t){throw((e,t)=>{console.error(`[ERROR] ${e}`,t)})(`解析Java文件失败: ${e}`,t),t}}async parseJavaFiles(e,t={}){const a=[];for(const s of e)try{const e=await this.parseJavaFile(s.filePath,s.content,t);e&&a.push(e)}catch(e){n(`跳过解析失败的文件: ${s.filePath}`,e)}return a}removeComments(e){return(e=e.replace(/\/\/.*$/gm,"")).replace(/\/\*[\s\S]*?\*\//g,"")}extractPackageName(e){const t=e.match(/package\s+([\w.]+)\s*;/);return t?t[1]:null}extractClassName(e){const t=e.match(/(?:public\s+)?class\s+(\w+)/);return t?t[1]:null}isEntityClass(t){for(const a of e.ENTITY_ANNOTATIONS)if(t.includes(`@${a}`))return!0;for(const a of e.FIELD_ANNOTATIONS)if(t.includes(`@${a}`))return!0;const a=/public\s+\w+\s+get\w+\s*\(/.test(t),s=/public\s+void\s+set\w+\s*\(/.test(t);return!(!a||!s)}extractClassAnnotations(e){const t=[],a=e.match(/((?:@\w+(?:\([^)]*\))?\s*)*)\s*(?:public\s+)?class\s+\w+/);if(!a)return t;const s=a[1].matchAll(/@(\w+)(?:\(([^)]*)\))?/g);for(const e of s){const a=e[1],s=e[2]||"",n=this.parseAnnotationAttributes(s);t.push({name:a,attributes:n,rawText:e[0]})}return t}extractTableName(e,t,a){const s=a.find((e=>"Table"===e.name));if(s&&s.attributes.name)return s.attributes.name;const n=a.find((e=>"TableName"===e.name));return n&&n.attributes.value?n.attributes.value:this.camelToSnakeCase(t)}extractFields(e,t){const a=[],s=/((?:@\w+(?:\([^)]*\))?\s*)*)\s*(?:private|protected|public)?\s+(\w+(?:<[^>]+>)?)\s+(\w+)\s*;/g;let n;for(;null!==(n=s.exec(e));){const t=n[1],s=n[2],r=n[3];if(e.includes(`static ${s} ${r}`)||e.includes(`final ${s} ${r}`))continue;const i=this.parseFieldAnnotations(t),o=this.extractColumnName(r,i),l=this.isPrimaryKey(i),c=this.isForeignKey(r,i),d=this.isNullable(i),m=this.mapJavaTypeToDbType(s);a.push({name:r,javaType:s,columnName:o,dbType:m,isPrimaryKey:l,isForeignKey:c,nullable:d,annotations:i})}return a}parseFieldAnnotations(e){const t=[],a=e.matchAll(/@(\w+)(?:\(([^)]*)\))?/g);for(const e of a){const a=e[1],s=e[2]||"",n=this.parseAnnotationAttributes(s);t.push({name:a,attributes:n,rawText:e[0]})}return t}parseAnnotationAttributes(e){const t={};if(!e.trim())return t;if(!e.includes("="))return t.value=this.parseAttributeValue(e.trim()),t;const a=e.split(",");for(const e of a){const[a,s]=e.split("=").map((e=>e.trim()));a&&s&&(t[a]=this.parseAttributeValue(s))}return t}parseAttributeValue(e){return(e=e.trim()).startsWith('"')&&e.endsWith('"')||e.startsWith("'")&&e.endsWith("'")?e.slice(1,-1):"true"===e||"false"!==e&&(/^\d+$/.test(e)?parseInt(e,10):/^\d+\.\d+$/.test(e)?parseFloat(e):e)}extractColumnName(e,t){const a=t.find((e=>"Column"===e.name));if(a&&a.attributes.name)return a.attributes.name;const s=t.find((e=>"TableField"===e.name));return s&&s.attributes.value?s.attributes.value:this.camelToSnakeCase(e)}isPrimaryKey(e){return e.some((e=>"Id"===e.name||"TableId"===e.name))}isForeignKey(e,t){if(t.some((e=>"JoinColumn"===e.name)))return!0;const a=["OneToOne","OneToMany","ManyToOne","ManyToMany"];return!!t.some((e=>a.includes(e.name)))||!(!e.endsWith("Id")||"id"===e)}isNullable(e){const t=e.find((e=>"Column"===e.name));return!t||void 0===t.attributes.nullable||t.attributes.nullable}mapJavaTypeToDbType(t){const a=t.replace(/<[^>]+>/g,"");return e.TYPE_MAPPINGS[a]||"VARCHAR"}camelToSnakeCase(e){return e.replace(/([A-Z])/g,"_$1").toLowerCase().replace(/^_/,"")}validateEntity(e){const t=[];return e.className||t.push("缺少类名"),e.tableName||t.push("缺少表名"),0===e.fields.length&&t.push("没有找到字段"),e.fields.some((e=>e.isPrimaryKey))||t.push("没有找到主键字段"),{valid:0===t.length,errors:t}}};r.ENTITY_ANNOTATIONS=["Entity","Table","TableName","Data","Component"],r.FIELD_ANNOTATIONS=["Id","Column","TableId","TableField","JoinColumn","OneToOne","OneToMany","ManyToOne","ManyToMany"],r.TYPE_MAPPINGS={String:"VARCHAR",Integer:"INT",int:"INT",Long:"BIGINT",long:"BIGINT",Double:"DOUBLE",double:"DOUBLE",Float:"FLOAT",float:"FLOAT",Boolean:"BOOLEAN",boolean:"BOOLEAN",Date:"DATETIME",LocalDate:"DATE",LocalDateTime:"DATETIME",LocalTime:"TIME",BigDecimal:"DECIMAL","byte[]":"BLOB","Byte[]":"BLOB"};let i=r;const o=(e,...t)=>console.log(`[DEBUG] ${e}`,...t),l=(e,...t)=>console.warn(`[WARN] ${e}`,...t);class c{async parseXmlFile(e,t,a={}){const s={parseSql:!0,extractRelations:!0,parseResultMaps:!0,maxFileSize:10485760,...a};try{if(o(`开始解析XML文件: ${e}`),t.length>s.maxFileSize)throw new Error(`文件过大: ${t.length} bytes`);if(!this.isMyBatisMapperFile(t))return o(`非MyBatis映射文件，跳过: ${e}`),null;const a=this.extractNamespace(t);if(!a)return l(`无法提取命名空间: ${e}`),null;const n=this.extractMappings(t,e,s),r=s.parseResultMaps?this.extractResultMaps(t):[],i=s.extractRelations?this.extractRelations(t,n,r):[];return o(`XML文件解析完成: ${a}, 映射数: ${n.length}, 关系数: ${i.length}`),{namespace:a,mappings:n,relations:i,resultMaps:r}}catch(t){throw((e,t)=>{console.error(`[ERROR] ${e}`,t)})(`解析XML文件失败: ${e}`,t),t}}async parseXmlFiles(e,t={}){const a=[];for(const s of e)try{const e=await this.parseXmlFile(s.filePath,s.content,t);e&&a.push(e)}catch(e){l(`跳过解析失败的文件: ${s.filePath}`,e)}return a}isMyBatisMapperFile(e){return e.includes("<mapper")&&e.includes("namespace=")}extractNamespace(e){const t=e.match(/namespace\s*=\s*["']([^"']+)["']/);return t?t[1]:null}extractMappings(e,t,a){const s=[],n=["select","insert","update","delete","resultMap"];for(const r of n){const n=new RegExp(`<${r}[^>]*>([\\s\\S]*?)</${r}>`,"gi");let i;for(;null!==(i=n.exec(e));){const e=i[0],n=i[1],o=this.extractAttribute(e,"id");if(!o)continue;const l={id:o,type:r,filePath:t};"resultMap"!==r&&(l.resultType=this.extractAttribute(e,"resultType"),l.resultMap=this.extractAttribute(e,"resultMap"),l.parameterType=this.extractAttribute(e,"parameterType"),a.parseSql&&(l.sql=this.extractSql(n))),s.push(l)}}return s}extractResultMaps(e){const t=[],a=/<resultMap[^>]*>([\s\S]*?)<\/resultMap>/gi;let s;for(;null!==(s=a.exec(e));){const e=s[0],a=s[1],n=this.extractAttribute(e,"id"),r=this.extractAttribute(e,"type");if(!n||!r)continue;const i={id:n,type:r,fieldMappings:this.extractFieldMappings(a),associations:this.extractAssociations(a),collections:this.extractCollections(a)};t.push(i)}return t}extractFieldMappings(e){const t=[],a=[/<id\s+([^>]*?)\/?>|<id\s+([^>]*?)>[\s\S]*?<\/id>/gi,/<result\s+([^>]*?)\/?>|<result\s+([^>]*?)>[\s\S]*?<\/result>/gi];for(let s=0;s<a.length;s++){const n=a[s],r=0===s;let i;for(;null!==(i=n.exec(e));){const e=i[1]||i[2],a=this.extractAttribute(e,"property"),s=this.extractAttribute(e,"column");a&&s&&t.push({property:a,column:s,javaType:this.extractAttribute(e,"javaType"),jdbcType:this.extractAttribute(e,"jdbcType"),isId:r})}}return t}extractAssociations(e){const t=[],a=/<association\s+([^>]*?)(?:\/>|>([\s\S]*?)<\/association>)/gi;let s;for(;null!==(s=a.exec(e));){const e=s[1],a=this.extractAttribute(e,"property"),n=this.extractAttribute(e,"javaType");a&&n&&t.push({property:a,javaType:n,column:this.extractAttribute(e,"column"),resultMap:this.extractAttribute(e,"resultMap"),select:this.extractAttribute(e,"select")})}return t}extractCollections(e){const t=[],a=/<collection\s+([^>]*?)(?:\/>|>([\s\S]*?)<\/collection>)/gi;let s;for(;null!==(s=a.exec(e));){const e=s[1],a=this.extractAttribute(e,"property"),n=this.extractAttribute(e,"ofType");a&&n&&t.push({property:a,ofType:n,column:this.extractAttribute(e,"column"),resultMap:this.extractAttribute(e,"resultMap"),select:this.extractAttribute(e,"select")})}return t}extractRelations(e,t,a){const s=[];return s.push(...this.extractRelationsFromResultMaps(a)),s.push(...this.extractRelationsFromSql(t)),s}extractRelationsFromResultMaps(e){const t=[];for(const a of e){const e=this.inferTableNameFromType(a.type);for(const s of a.associations){const n=this.inferTableNameFromType(s.javaType);t.push({id:`${a.id}_${s.property}`,sourceTable:e,targetTable:n,type:"many-to-one",foreignKey:s.column,confidence:.8,source:"association"})}for(const s of a.collections){const n=this.inferTableNameFromType(s.ofType);t.push({id:`${a.id}_${s.property}`,sourceTable:e,targetTable:n,type:"one-to-many",foreignKey:s.column,confidence:.8,source:"collection"})}}return t}extractRelationsFromSql(e){const t=[];for(const a of e){if(!a.sql)continue;const e=this.extractJoinRelations(a.sql,a.id);t.push(...e)}return t}extractJoinRelations(e,t){const a=[],s=e.replace(/\s+/g," ").trim().toUpperCase(),n=/(LEFT|RIGHT|INNER|FULL)?\s*JOIN\s+(\w+)\s+(?:AS\s+)?(\w+)?\s+ON\s+([\w.]+)\s*=\s*([\w.]+)/gi;let r;for(;null!==(r=n.exec(s));){const e=r[1]||"INNER",n=r[2],i=(r[3],r[4]),o=r[5],l=this.inferSourceTableFromSql(s);l&&n&&a.push({id:`${t}_join_${n}`,sourceTable:l,targetTable:n,type:this.inferRelationTypeFromJoin(e),joinCondition:`${i} = ${o}`,confidence:.7,source:"join"})}return a}extractAttribute(e,t){const a=new RegExp(`${t}\\s*=\\s*["']([^"']+)["']`,"i"),s=e.match(a);return s?s[1]:null}extractSql(e){let t=e.replace(/<!\[CDATA\[([\s\S]*?)\]\]>/g,"$1");return t=t.replace(/<!--[\s\S]*?-->/g,""),t=t.replace(/\s+/g," ").trim(),t}inferTableNameFromType(e){return(e.split(".").pop()||e).replace(/([A-Z])/g,"_$1").toLowerCase().replace(/^_/,"")}inferSourceTableFromSql(e){const t=e.match(/FROM\s+(\w+)/i);return t?t[1]:null}inferRelationTypeFromJoin(e){switch(e.toUpperCase()){case"LEFT":case"LEFT OUTER":return"one-to-many";default:return"many-to-one"}}validateXmlResult(e){const t=[];e.namespace||t.push("缺少命名空间"),0===e.mappings.length&&t.push("没有找到映射语句");for(const a of e.mappings)a.id||t.push(`映射语句缺少ID: ${a.type}`);return{valid:0===t.length,errors:t}}}c.SQL_KEYWORDS=["SELECT","FROM","WHERE","JOIN","INNER JOIN","LEFT JOIN","RIGHT JOIN","FULL JOIN","ON","AND","OR","GROUP BY","ORDER BY","HAVING","UNION"];const d=(e,...t)=>console.log(`[DEBUG] ${e}`,...t),m=class e{async inferRelations(t,a=[],s={}){const n={strategies:e.DEFAULT_STRATEGIES,minConfidence:.6,mergeSimilarRelations:!0,inferReverseRelations:!0,...s};try{d(`开始推断关系，实体数: ${t.length}, XML结果数: ${a.length}`);const e=[];if(this.isStrategyEnabled("naming-convention",n.strategies)){const a=await this.inferByNamingConvention(t,n);e.push(...a)}if(this.isStrategyEnabled("annotation-based",n.strategies)){const a=await this.inferByAnnotations(t,n);e.push(...a)}if(this.isStrategyEnabled("xml-mapping",n.strategies)){const s=await this.inferByXmlMapping(t,a,n);e.push(...s)}if(this.isStrategyEnabled("field-type-analysis",n.strategies)){const a=await this.inferByFieldTypeAnalysis(t,n);e.push(...a)}const s=e.filter((e=>e.confidence>=n.minConfidence)),r=n.mergeSimilarRelations?this.mergeSimilarRelations(s):s,i=n.inferReverseRelations?this.inferReverseRelations(r):r;return d(`关系推断完成，发现关系数: ${i.length}`),i}catch(e){throw((e,t)=>{console.error(`[ERROR] ${e}`,t)})("关系推断失败",e),e}}async inferByNamingConvention(e,t){const a=[],s=this.getStrategy("naming-convention",t.strategies);if(!s)return a;for(const t of e)for(const n of t.fields)if(this.isForeignKeyByNaming(n)){const r=this.inferTargetTableFromFieldName(n.name),i=e.find((e=>e.tableName===r||this.normalizeTableName(e.className)===r));if(i){const e=this.calculateNamingConfidence(n,i);e>=s.minConfidence&&a.push({id:`naming_${t.tableName}_${i.tableName}_${n.name}`,sourceTable:t.tableName,targetTable:i.tableName,sourceField:n.name,targetField:"id",type:"many-to-one",confidence:e*s.weight,strategy:"naming-convention",evidence:[`字段名 ${n.name} 符合外键命名约定`,`推断目标表: ${i.tableName}`],bidirectional:!1})}}return a}async inferByAnnotations(e,t){const a=[],s=this.getStrategy("annotation-based",t.strategies);if(!s)return a;for(const t of e)for(const n of t.fields){const r=n.annotations.filter((e=>["OneToOne","OneToMany","ManyToOne","ManyToMany","JoinColumn"].includes(e.name)));for(const i of r){const r=this.mapAnnotationToRelationType(i.name);if(r){const o=this.findTargetEntityByType(e,n.javaType);if(o){const e=this.calculateAnnotationConfidence(i,n);e>=s.minConfidence&&a.push({id:`annotation_${t.tableName}_${o.tableName}_${n.name}`,sourceTable:t.tableName,targetTable:o.tableName,sourceField:n.name,targetField:this.inferTargetField(i,o),type:r,confidence:e*s.weight,strategy:"annotation-based",evidence:[`注解 @${i.name} 明确指定关系类型`,`字段类型: ${n.javaType}`],bidirectional:!1})}}}}return a}async inferByXmlMapping(e,t,a){const s=[],n=this.getStrategy("xml-mapping",a.strategies);if(!n)return s;for(const a of t)if(a.relations)for(const t of a.relations){const a=e.find((e=>e.tableName===t.sourceTable||this.normalizeTableName(e.className)===t.sourceTable)),r=e.find((e=>e.tableName===t.targetTable||this.normalizeTableName(e.className)===t.targetTable));if(a&&r){const e=this.calculateXmlConfidence(t);e>=n.minConfidence&&s.push({id:`xml_${t.id}`,sourceTable:a.tableName,targetTable:r.tableName,sourceField:t.foreignKey,targetField:"id",type:t.type,confidence:e*n.weight,strategy:"xml-mapping",evidence:["XML映射文件中明确定义的关系",`来源: ${t.source}`,t.joinCondition?`连接条件: ${t.joinCondition}`:""].filter(Boolean),bidirectional:!1})}}return s}async inferByFieldTypeAnalysis(e,t){const a=[],s=this.getStrategy("field-type-analysis",t.strategies);if(!s)return a;for(const t of e)for(const n of t.fields){const r=this.findTargetEntityByType(e,n.javaType);if(r&&r!==t){const e=this.calculateTypeAnalysisConfidence(n,r);e>=s.minConfidence&&a.push({id:`type_${t.tableName}_${r.tableName}_${n.name}`,sourceTable:t.tableName,targetTable:r.tableName,sourceField:n.name,targetField:"id",type:this.inferRelationTypeFromField(n),confidence:e*s.weight,strategy:"field-type-analysis",evidence:[`字段类型 ${n.javaType} 对应实体 ${r.className}`,"推断为对象引用关系"],bidirectional:!1})}}return a}isStrategyEnabled(e,t){const a=t.find((t=>t.name===e));return!!a&&a.enabled}getStrategy(e,t){return t.find((t=>t.name===e))||null}isForeignKeyByNaming(e){const t=e.name.toLowerCase();return!(!t.endsWith("id")||e.isPrimaryKey||"id"===t)||["_id","Id","_key","Key"].some((t=>e.name.includes(t)))}inferTargetTableFromFieldName(e){let t=e.replace(/Id$/,"").replace(/_id$/,"");return this.normalizeTableName(t)}normalizeTableName(e){return e.replace(/([A-Z])/g,"_$1").toLowerCase().replace(/^_/,"")}calculateNamingConfidence(e,t){let a=.5;const s=t.className.toLowerCase()+"Id";return e.name.toLowerCase()===s&&(a+=.3),["Long","Integer","long","int"].includes(e.javaType)&&(a+=.2),Math.min(a,1)}mapAnnotationToRelationType(e){switch(e){case"OneToOne":return"one-to-one";case"OneToMany":return"one-to-many";case"ManyToOne":return"many-to-one";case"ManyToMany":return"many-to-many";default:return null}}findTargetEntityByType(e,t){const a=t.replace(/<[^>]+>/g,"").split(".").pop()||t;return e.find((e=>e.className===a))||null}calculateAnnotationConfidence(e,t){let a=.8;return"JoinColumn"===e.name&&(a+=.1),Math.min(a,1)}inferTargetField(e,t){if(e.attributes&&e.attributes.referencedColumnName)return e.attributes.referencedColumnName;const a=t.fields.find((e=>e.isPrimaryKey));return a?a.columnName:"id"}calculateXmlConfidence(e){return e.confidence||.7}calculateTypeAnalysisConfidence(e,t){let a=.6;return e.name.toLowerCase().includes(t.className.toLowerCase())&&(a+=.2),Math.min(a,1)}inferRelationTypeFromField(e){return e.javaType.includes("List")||e.javaType.includes("Set")?"one-to-many":"many-to-one"}mergeSimilarRelations(e){const t=[],a=new Set;for(const s of e){const n=`${s.sourceTable}_${s.targetTable}_${s.sourceField}`;if(a.has(n))continue;const r=e.filter((e=>e.sourceTable===s.sourceTable&&e.targetTable===s.targetTable&&e.sourceField===s.sourceField&&!a.has(`${e.sourceTable}_${e.targetTable}_${e.sourceField}`)));if(r.length>1){const e=r.reduce(((e,t)=>t.confidence>e.confidence?t:e));e.evidence=Array.from(new Set(r.flatMap((e=>e.evidence)))),t.push(e),r.forEach((e=>a.add(`${e.sourceTable}_${e.targetTable}_${e.sourceField}`)))}else t.push(s),a.add(n)}return t}inferReverseRelations(e){const t=[...e];for(const a of e)if(!e.some((e=>e.sourceTable===a.targetTable&&e.targetTable===a.sourceTable))&&"many-to-many"!==a.type){const e=this.getReverseRelationType(a.type);e&&t.push({id:`reverse_${a.id}`,sourceTable:a.targetTable,targetTable:a.sourceTable,sourceField:a.targetField,targetField:a.sourceField,type:e,confidence:.8*a.confidence,strategy:`reverse-${a.strategy}`,evidence:[`基于 ${a.strategy} 推断的反向关系`],bidirectional:!0})}return t}getReverseRelationType(e){switch(e){case"one-to-many":return"many-to-one";case"many-to-one":return"one-to-many";case"one-to-one":return"one-to-one";default:return null}}validateInferenceResult(e){const t=[];for(const a of e)a.sourceTable&&a.targetTable||t.push(`关系缺少源表或目标表: ${a.id}`),(a.confidence<0||a.confidence>1)&&t.push(`关系置信度超出范围 [0,1]: ${a.id}`),a.strategy||t.push(`关系缺少推断策略: ${a.id}`);return{valid:0===t.length,errors:t}}};m.DEFAULT_STRATEGIES=[{name:"naming-convention",weight:.8,enabled:!0,minConfidence:.6},{name:"annotation-based",weight:.9,enabled:!0,minConfidence:.7},{name:"xml-mapping",weight:.85,enabled:!0,minConfidence:.75},{name:"field-type-analysis",weight:.7,enabled:!0,minConfidence:.5}];let p=m;new class{constructor(){this.isTerminating=!1,this.processedTasks=0,this.startTime=Date.now(),this.workerId=e.workerData.workerId,this.config=e.workerData.config,this.javaParser=new i,this.xmlParser=new c,this.relationInference=new p,this.setupMessageHandling(),this.sendMessage({id:this.generateMessageId(),type:t.PONG,payload:{workerId:this.workerId,startTime:this.startTime},timestamp:Date.now(),isResponse:!0})}setupMessageHandling(){if(!e.parentPort)throw new Error("Worker must be run in worker_threads context");e.parentPort.on("message",(async e=>{if(!this.isTerminating)try{await this.handleMessage(e)}catch(t){this.sendError(t,e.id)}})),e.parentPort.on("error",(e=>{this.sendError(e)})),setInterval((()=>{global.gc&&global.gc()}),3e4)}async handleMessage(e){const a=Date.now();try{let s;switch(e.type){case t.PING:s=await this.handlePing(e);break;case t.PARSE_JAVA_FILE:s=await this.handleParseJavaFile(e);break;case t.PARSE_XML_FILE:s=await this.handleParseXmlFile(e);break;case t.PARSE_BATCH_FILES:s=await this.handleBatchParse(e);break;case t.INFER_RELATIONS:s=await this.handleInferRelations(e);break;case t.VALIDATE_RELATIONS:s=await this.handleValidateRelations(e);break;case t.GENERATE_DIAGRAM:s=await this.handleGenerateDiagram(e);break;case t.EXPORT_DIAGRAM:s=await this.handleExportDiagram(e);break;case t.TERMINATE:return void await this.handleTerminate();default:throw new Error(`Unknown message type: ${e.type}`)}this.processedTasks++,this.sendResponse(e.id,{success:!0,data:s,processingTime:Date.now()-a,workerStats:{processedTasks:this.processedTasks,uptime:Date.now()-this.startTime,memoryUsage:process.memoryUsage()}})}catch(t){this.sendResponse(e.id,{success:!1,error:t.message,processingTime:Date.now()-a,workerStats:{processedTasks:this.processedTasks,uptime:Date.now()-this.startTime,memoryUsage:process.memoryUsage()}})}}async handlePing(e){return{workerId:this.workerId,timestamp:Date.now(),uptime:Date.now()-this.startTime,processedTasks:this.processedTasks,memoryUsage:process.memoryUsage(),status:"healthy"}}async handleParseJavaFile(e){const t=e.payload;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:"开始解析Java文件",processed:0,total:1});const a=await this.parseJavaFileContent(t);return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:"解析完成",processed:1,total:1}),a}async handleParseXmlFile(e){const t=e.payload;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:"开始解析XML文件",processed:0,total:1});const a=await this.parseXmlFileContent(t);return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:"解析完成",processed:1,total:1}),a}async handleBatchParse(e){const t=e.payload,a=[],s=t.files.length;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:`开始批量解析${s}个文件`,processed:0,total:s});const n=t.files.filter((e=>"java"===e.fileType)),r=t.files.filter((e=>"xml"===e.fileType));let i=0;if(n.length>0){this.sendProgress(e.id,{taskId:e.id,percentage:Math.floor(100*i/s),message:`处理${n.length}个Java文件...`,processed:i,total:s});for(const t of n){try{const n=await this.parseJavaFileContent(t);a.push(n),i++,i%5!=0&&i!==s||this.sendProgress(e.id,{taskId:e.id,percentage:Math.floor(100*i/s),message:`已处理 ${i}/${s} 个文件`,processed:i,total:s})}catch(e){console.warn(`批量解析Java文件失败: ${t.filePath}`,e),a.push({filePath:t.filePath,error:e.message,success:!1}),i++}i%3==0&&await this.sleep(5)}}if(r.length>0){this.sendProgress(e.id,{taskId:e.id,percentage:Math.floor(100*i/s),message:`处理${r.length}个XML文件...`,processed:i,total:s});for(const t of r){try{const n=await this.parseXmlFileContent(t);a.push(n),i++,i%5!=0&&i!==s||this.sendProgress(e.id,{taskId:e.id,percentage:Math.floor(100*i/s),message:`已处理 ${i}/${s} 个文件`,processed:i,total:s})}catch(e){console.warn(`批量解析XML文件失败: ${t.filePath}`,e),a.push({filePath:t.filePath,error:e.message,success:!1}),i++}i%3==0&&await this.sleep(5)}}return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:`批量解析完成，成功处理${a.filter((e=>!1!==e.success)).length}个文件`,processed:s,total:s}),a}async handleInferRelations(e){const t=e.payload;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:"开始推断实体关系",processed:0,total:1});try{const a=await this.inferEntityRelations(t);return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:`关系推断完成，发现${a.relations?.length||0}个关系`,processed:1,total:1}),a}catch(e){return console.warn("关系推断失败",e),{relations:[],confidence:0,error:e.message}}}async handleValidateRelations(e){const t=e.payload;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:"开始关系验证",processed:0,total:1});const a=await this.validateEntityRelations(t);return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:"关系验证完成",processed:1,total:1}),a}async handleGenerateDiagram(e){const t=e.payload;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:"开始生成ER图",processed:0,total:1});const a=await this.generateDiagramContent(t);return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:"ER图生成完成",processed:1,total:1}),a}async handleExportDiagram(e){const t=e.payload;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:"开始导出图表",processed:0,total:1});const a=await this.exportDiagramContent(t);return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:"图表导出完成",processed:1,total:1}),a}async handleTerminate(){this.isTerminating=!0,this.sendMessage({id:this.generateMessageId(),type:t.PONG,payload:{workerId:this.workerId,terminating:!0,finalStats:{processedTasks:this.processedTasks,uptime:Date.now()-this.startTime,memoryUsage:process.memoryUsage()}},timestamp:Date.now(),isResponse:!0}),await this.cleanup(),setTimeout((()=>{process.exit(0)}),100)}async parseJavaFileContent(e){try{const t=await this.javaParser.parseJavaFile(e.filePath,e.content,e.options);return{filePath:e.filePath,fileType:"java",entity:t,parseTime:Date.now()}}catch(e){throw new Error(`Java文件解析失败: ${e}`)}}async parseXmlFileContent(e){try{const t=await this.xmlParser.parseXmlFile(e.filePath,e.content,e.options);return{filePath:e.filePath,fileType:"xml",result:t,parseTime:Date.now()}}catch(e){throw new Error(`XML文件解析失败: ${e}`)}}async inferEntityRelations(e){try{const{entities:t,mappings:a=[],strategies:s,minConfidence:n=.6}=e,r=await this.relationInference.inferRelations(t,a,{minConfidence:n,mergeSimilarRelations:!0,inferReverseRelations:!0});return{relations:r,confidence:r.length>0?r.reduce(((e,t)=>e+t.confidence),0)/r.length:0,totalRelations:r.length}}catch(e){return console.warn("实体关系推断失败",e),{relations:[],confidence:0,error:e.message}}}async validateEntityRelations(e){return{valid:!0,validatedRelations:e.relations||[],validationErrors:[],validationTime:Date.now()}}async generateDiagramContent(e){return{format:e.options.format,content:"\n                erDiagram\n                    User {\n                        int id\n                        string name\n                        string email\n                    }\n                    Order {\n                        int id\n                        int user_id\n                        decimal amount\n                    }\n                    User ||--o{ Order : has\n            ",metadata:{entityCount:e.entities.length,relationCount:e.relations.length,theme:e.options.theme},generationTime:Date.now()}}async exportDiagramContent(e){return{exportPath:e.exportPath,format:e.format,size:1024,exportTime:Date.now()}}sendResponse(e,a){this.sendMessage({id:this.generateMessageId(),type:t.PONG,payload:a,timestamp:Date.now(),isResponse:!0,responseToId:e})}sendProgress(e,a){this.sendMessage({id:this.generateMessageId(),type:t.PROGRESS,payload:a,timestamp:Date.now()})}sendError(e,s){const n={type:a.UNKNOWN_ERROR,message:e.message,stack:e.stack,taskId:s,workerId:this.workerId,timestamp:Date.now(),context:{memoryUsage:process.memoryUsage()}};this.sendMessage({id:this.generateMessageId(),type:t.ERROR,payload:n,timestamp:Date.now()})}sendMessage(t){e.parentPort&&!this.isTerminating&&e.parentPort.postMessage(t)}async cleanup(){try{this.javaParser=null,this.xmlParser=null,this.relationInference=null,global.gc&&global.gc()}catch(e){console.warn("Worker cleanup failed",e)}}sleep(e){return new Promise((t=>setTimeout(t,e)))}generateMessageId(){return`msg_${this.workerId}_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}},module.exports={}})();
//# sourceMappingURL=worker-thread.js.map