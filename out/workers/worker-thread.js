(()=>{"use strict";var __webpack_modules__={167:e=>{e.exports=require("worker_threads")},531:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{J:()=>SmartJavaParser});const Logger={debug:(e,...t)=>console.log(`[DEBUG] ${e}`,...t),info:(e,...t)=>console.log(`[INFO] ${e}`,...t),warn:(e,...t)=>console.warn(`[WARN] ${e}`,...t),error:(e,t)=>console.error(`[ERROR] ${e}`,t)};let vscode=null,isWorkerThread=!1,vscodeLoadAttempted=!1;function detectWorkerThread(){try{const{parentPort:e}=__webpack_require__(167);if(null!==e)return!0}catch(e){}return"function"==typeof globalThis.importScripts||"undefined"!=typeof process&&!0===process.isWorkerThread||void 0!==globalThis.self&&void 0===globalThis.window&&void 0===globalThis.document}function loadVSCodeAPI(){if(vscodeLoadAttempted&&vscode)return vscode;vscodeLoadAttempted=!0;try{return vscode=__webpack_require__(Object(function(){var e=new Error("Cannot find module 'vscode'");throw e.code="MODULE_NOT_FOUND",e}())),Logger.debug("VS Code API通过直接require加载成功"),vscode}catch(error1){Logger.debug("直接require失败，尝试其他方法",error1);try{return vscode=eval("require")("vscode"),Logger.debug("VS Code API通过eval require加载成功"),vscode}catch(e){Logger.debug("eval require失败，尝试全局对象",e);try{if(void 0!==globalThis.vscode)return vscode=globalThis.vscode,Logger.debug("VS Code API从全局对象获取成功"),vscode;if("undefined"!=typeof global&&global.vscode)return vscode=global.vscode,Logger.debug("VS Code API从global对象获取成功"),vscode;if(void 0!==globalThis.window&&globalThis.window.vscode)return vscode=globalThis.window.vscode,Logger.debug("VS Code API从window对象获取成功"),vscode}catch(e){Logger.debug("全局对象检查失败",e)}return Logger.debug("所有VS Code API加载方法都失败，将使用正则解析策略"),null}}}try{isWorkerThread=detectWorkerThread(),isWorkerThread?Logger.debug("检测到Worker线程环境，将使用正则解析策略"):(vscode=loadVSCodeAPI(),vscode?Logger.debug("VS Code API已加载，LSP解析可用"):Logger.debug("VS Code API加载失败，将使用正则解析策略"))}catch(e){Logger.debug("VS Code API初始化失败，将使用正则解析策略",e)}class ParseResultCache{constructor(){this.cache=new Map,this.TTL=3e5}getCacheKey(e,t){return`${e}:${this.simpleHash(t)}`}get(e){const t=this.cache.get(e);return t&&Date.now()-t.timestamp<this.TTL?t.entity:(t&&this.cache.delete(e),null)}set(e,t){this.cache.set(e,{entity:t,timestamp:Date.now()})}clear(){this.cache.clear()}simpleHash(e){let t=0;for(let a=0;a<e.length;a++)t=(t<<5)-t+e.charCodeAt(a),t&=t;return t.toString(36)}}const _LSPJavaParser=class e{constructor(){this.isJavaExtensionAvailable=!1,this.checkJavaExtensionAvailability()}static getInstance(){return e.instance||(e.instance=new e),e.instance}async checkJavaExtensionAvailability(){if(vscode||isWorkerThread||(vscode=loadVSCodeAPI()),!vscode)return this.isJavaExtensionAvailable=!1,void Logger.debug("VS Code API不可用，LSP解析不可用");try{const e=["redhat.java","vscjava.vscode-java-pack","ms-vscode.vscode-java-pack","oracle.oracle-java"];let t=null,a="";for(const s of e){const e=vscode.extensions.getExtension(s);if(e){t=e,a=s,Logger.debug(`发现Java扩展: ${s} (${e.packageJSON?.displayName})`),this.isJavaExtensionAvailable=!0;break}}if(!t)return this.isJavaExtensionAvailable=!1,Logger.debug('Java扩展未安装，建议安装 "Language Support for Java(TM) by Red Hat" 以获得更好的解析效果'),void this.listJavaRelatedExtensions();if(Logger.debug(`使用Java扩展: ${a} v${t.packageJSON?.version}`),this.isJavaExtensionAvailable=t.isActive,this.isJavaExtensionAvailable)Logger.debug("Java扩展已激活，LSP解析可用");else{Logger.debug("Java扩展未激活，尝试激活中...");try{await t.activate(),this.isJavaExtensionAvailable=t.isActive,this.isJavaExtensionAvailable?Logger.debug("Java扩展激活成功，LSP解析可用"):Logger.debug("Java扩展激活失败，将使用正则解析")}catch(e){Logger.debug("Java扩展激活失败:",e?.message),this.isJavaExtensionAvailable=!1}}}catch(e){Logger.debug("检测Java扩展时出错:",e?.message),this.isJavaExtensionAvailable=!1}}listJavaRelatedExtensions(){try{const e=vscode.extensions.all.filter((e=>{const t=e.id.toLowerCase(),a=(e.packageJSON?.displayName||"").toLowerCase();return t.includes("java")||t.includes("redhat")||a.includes("java")}));e.length>0?(Logger.debug("发现Java相关扩展:"),e.forEach((e=>{const t=e.isActive?"已激活":"未激活";Logger.debug(`  - ${e.id} (${e.packageJSON?.displayName}) [${t}]`)}))):Logger.debug("未发现任何Java相关扩展")}catch(e){Logger.debug("列出扩展时出错:",e?.message)}}async parseJavaFile(e,t,a){if(!this.isJavaExtensionAvailable||!vscode)return Logger.debug("LSP不可用，跳过LSP解析"),null;try{Logger.debug(`开始LSP解析: ${e}`);const s=vscode.Uri.file(e);let r;try{r=await vscode.workspace.openTextDocument(s)}catch(e){r=await vscode.workspace.openTextDocument({content:t,language:"java"})}const n=await this.getDocumentSymbols(r,a.lspTimeout);if(!n||0===n.length)return Logger.debug("LSP未返回符号信息"),null;const o=await this.extractEntityFromSymbols(n,r,e);return o&&(o.parseMethod="lsp",o.confidence=.9,Logger.debug(`LSP解析成功: ${o.className}`)),o}catch(t){return Logger.warn(`LSP解析失败: ${e}`,t),null}}async getDocumentSymbols(e,t){return new Promise((a=>{const s=setTimeout((()=>{Logger.debug(`LSP符号获取超时 (${t}ms)，降级到正则解析`),a(null)}),t);vscode.commands.executeCommand("vscode.executeDocumentSymbolProvider",e.uri).then((e=>{clearTimeout(s),e&&e.length>0?(Logger.debug(`LSP成功获取 ${e.length} 个符号`),a(e)):(Logger.debug("LSP未返回符号信息，降级到正则解析"),a(null))})).catch((e=>{clearTimeout(s),Logger.debug("LSP符号获取失败，降级到正则解析:",e?.message||e),a(null)}))}))}async extractEntityFromSymbols(e,t,a){const s=e.find((e=>5===e.kind));if(!s)return null;const r=s.name,n=this.extractPackageFromDocument(t);if(!await this.isEntityClassFromSymbols(e,t))return null;const o=await this.extractFieldsFromSymbols(s.children||[],t),i=await this.extractClassAnnotationsFromSymbols(s,t);return{className:r,packageName:n||"",tableName:this.extractTableNameFromAnnotations(r,i),fields:o,annotations:i,filePath:a,isEntity:!0,parseMethod:"lsp",confidence:.9}}extractPackageFromDocument(e){const t=e.getText().match(/package\s+([\w.]+)\s*;/);return t?t[1]:null}async isEntityClassFromSymbols(e,t){const a=t.getText(),s=["@Entity","@Table","@TableName","@Data","@Component"];for(const e of s)if(a.includes(e))return Logger.debug(`LSP通过类级别注解识别为实体类: ${e}`),!0;const r=["@Id","@Column","@TableId","@TableField"];for(const e of r)if(a.includes(e))return Logger.debug(`LSP通过字段注解识别为实体类: ${e}`),!0;const n=/public\s+\w+\s+get\w+\s*\(/.test(a),o=/public\s+void\s+set\w+\s*\(/.test(a);if(n&&o)return Logger.debug("LSP通过getter/setter方法识别为实体类"),!0;if(/private\s+\w+\s+\w+\s*;/.test(a))return Logger.debug("LSP通过私有字段识别为潜在实体类"),!0;const i=a.match(/(?:public\s+)?class\s+(\w+)/);if(i){const e=i[1],t=[/Entity$/i,/Model$/i,/DO$/i,/DTO$/i,/VO$/i,/PO$/i,/Bean$/i];for(const a of t)if(a.test(e))return Logger.debug(`LSP通过类名模式识别为实体类: ${e}`),!0}const l=a.match(/package\s+([\w.]+)\s*;/);if(l){const e=l[1].toLowerCase(),t=["entity","model","domain","pojo","bean","dto","vo","po"];for(const a of t)if(e.includes(a))return Logger.debug(`LSP通过包名识别为实体类: ${e}`),!0}if(a.includes("implements Serializable")||a.includes("extends Serializable"))return Logger.debug("LSP通过Serializable接口识别为实体类"),!0;const c=["javax.persistence","com.baomidou.mybatisplus","org.springframework.data.jpa","lombok.Data","lombok.Entity"];for(const e of c)if(a.includes(`import ${e}`))return Logger.debug(`LSP通过导入语句识别为实体类: ${e}`),!0;const d=(a.match(/private\s+\w+\s+\w+\s*;/g)||[]).length;if(d>=2){const e=[/Util$/i,/Utils$/i,/Helper$/i,/Config$/i,/Configuration$/i,/Constants?$/i,/Factory$/i,/Builder$/i,/Manager$/i,/Service$/i,/Controller$/i,/Repository$/i,/Dao$/i];let t=!1;if(i){const a=i[1];for(const s of e)if(s.test(a)){t=!0;break}}if(!t)return Logger.debug(`LSP通过字段数量识别为潜在实体类: ${d}个字段`),!0}return Logger.debug("LSP未识别为实体类，将跳过解析"),!1}async extractClassAnnotationsFromSymbols(e,t){const a=t.getText().split("\n"),s=[];let r=e.location.range.start.line-1;for(;r>=0&&a[r].trim().startsWith("@");)s.unshift(a[r]),r--;const n=s.join("\n");return this.parseFieldAnnotationsFromText(n)}extractTableNameFromAnnotations(e,t){const a=t.find((e=>"Table"===e.name));if(a&&a.attributes.name)return a.attributes.name;const s=t.find((e=>"TableName"===e.name));return s&&s.attributes.value?s.attributes.value:this.camelToSnakeCase(e)}parseAnnotationAttributes(e){const t={};if(!e.trim())return t;if(!e.includes("="))return t.value=this.parseAttributeValue(e.trim()),t;const a=e.split(",");for(const e of a){const[a,s]=e.split("=").map((e=>e.trim()));a&&s&&(t[a]=this.parseAttributeValue(s))}return t}parseAttributeValue(e){return(e=e.trim()).startsWith('"')&&e.endsWith('"')||e.startsWith("'")&&e.endsWith("'")?e.slice(1,-1):"true"===e||"false"!==e&&(/^\d+$/.test(e)?parseInt(e,10):/^\d+\.\d+$/.test(e)?parseFloat(e):e)}mapJavaTypeToDbType(e){return{String:"VARCHAR",Integer:"INT",int:"INT",Long:"BIGINT",long:"BIGINT",Double:"DOUBLE",double:"DOUBLE",Float:"FLOAT",float:"FLOAT",Boolean:"BOOLEAN",boolean:"BOOLEAN",Date:"DATETIME",LocalDate:"DATE",LocalDateTime:"DATETIME",LocalTime:"TIME",BigDecimal:"DECIMAL","byte[]":"BLOB","Byte[]":"BLOB"}[e.replace(/<[^>]+>/g,"")]||"VARCHAR"}camelToSnakeCase(e){return e.replace(/([A-Z])/g,"_$1").toLowerCase().replace(/^_/,"")}getJavaExtensionStatus(){return this.isJavaExtensionAvailable}async extractFieldsFromSymbols(e,t){const a=[],s=t.getText().split("\n");for(const t of e){if(8!==t.kind)continue;const e=t.name,r=t.location.range.start.line,n=this.getFieldDeclarationLines(s,r).join("\n"),o=this.extractFieldType(n,e);if(!o)continue;const i=this.parseFieldAnnotationsFromText(n),l=this.extractColumnNameFromAnnotations(e,i),c=this.isPrimaryKeyFromAnnotations(i),d=this.isForeignKeyFromAnnotations(e,i),u=this.isNullableFromAnnotations(i),g=this.mapJavaTypeToDbType(o);a.push({name:e,javaType:o,columnName:l,dbType:g,isPrimaryKey:c,isForeignKey:d,nullable:u,annotations:i,position:{line:t.location.range.start.line,character:t.location.range.start.character}})}return a}getFieldDeclarationLines(e,t){const a=[];let s=t-1;for(;s>=0&&e[s].trim().startsWith("@");)a.unshift(e[s]),s--;return t<e.length&&a.push(e[t]),a}extractFieldType(e,t){const a=new RegExp(`(?:private|protected|public)?\\s+(\\w+(?:<[^>]+>)?)\\s+${t}\\s*[;=]`),s=e.match(a);return s?s[1]:null}parseFieldAnnotationsFromText(e){const t=[],a=e.matchAll(/@(\w+)(?:\(([^)]*)\))?/g);for(const e of a){const a=e[1],s=e[2]||"",r=this.parseAnnotationAttributes(s);t.push({name:a,attributes:r,rawText:e[0]})}return t}extractColumnNameFromAnnotations(e,t){const a=t.find((e=>"Column"===e.name));if(a&&a.attributes.name)return a.attributes.name;const s=t.find((e=>"TableField"===e.name));return s&&s.attributes.value?s.attributes.value:this.camelToSnakeCase(e)}isPrimaryKeyFromAnnotations(e){return e.some((e=>"Id"===e.name||"TableId"===e.name))}isForeignKeyFromAnnotations(e,t){if(t.some((e=>"JoinColumn"===e.name)))return!0;const a=["OneToOne","OneToMany","ManyToOne","ManyToMany"];return!!t.some((e=>a.includes(e.name)))||!(!e.endsWith("Id")||"id"===e)}isNullableFromAnnotations(e){const t=e.find((e=>"Column"===e.name));return!t||void 0===t.attributes.nullable||t.attributes.nullable}};_LSPJavaParser.instance=null;let LSPJavaParser=_LSPJavaParser;const _SmartJavaParser=class e{constructor(){this.lspParser=LSPJavaParser.getInstance(),this.cache=new ParseResultCache}async parseJavaFile(e,t,a={}){const s={parseMethodBodies:!1,includeComments:!0,parseImports:!0,maxFileSize:10485760,enableLSP:!0,lspTimeout:3e3,enableHybrid:!0,...a};try{Logger.debug(`开始混合解析Java文件: ${e}`);const a=this.cache.getCacheKey(e,t),r=this.cache.get(a);if(r)return Logger.debug(`使用缓存结果: ${r.className}`),r;if(t.length>s.maxFileSize)throw new Error(`文件过大: ${t.length} bytes`);let n=null;if(s.enableLSP&&vscode)try{const a=await this.lspParser.parseJavaFile(e,t,s);if(a)if(Logger.debug(`LSP解析成功: ${a.className}`),s.enableHybrid){const r=await this.parseJavaFileWithRegex(e,t,s);r?(n=this.mergeParseResults(a,r),n.parseMethod="hybrid",n.confidence=Math.min(a.confidence+.05,.95),Logger.debug(`混合解析完成: ${n.className}`)):n=a}else n=a}catch(t){Logger.warn(`LSP解析失败，降级到正则解析: ${e}`,t)}return n||(n=await this.parseJavaFileWithRegex(e,t,s),n&&(n.parseMethod="regex",n.confidence=.7,Logger.debug(`正则解析完成: ${n.className}`))),n&&this.cache.set(a,n),n}catch(t){throw Logger.error(`解析Java文件失败: ${e}`,t),t}}async parseJavaFiles(e,t={}){const a=[];for(const s of e)try{const e=await this.parseJavaFile(s.filePath,s.content,t);e&&a.push(e)}catch(e){Logger.warn(`跳过解析失败的文件: ${s.filePath}`,e)}return a}removeComments(e){return(e=e.replace(/\/\/.*$/gm,"")).replace(/\/\*[\s\S]*?\*\//g,"")}extractPackageName(e){const t=e.match(/package\s+([\w.]+)\s*;/);return t?t[1]:null}extractClassName(e){const t=e.match(/(?:public\s+)?class\s+(\w+)/);return t?t[1]:null}isEntityClass(t){for(const a of e.ENTITY_ANNOTATIONS)if(t.includes(`@${a}`))return Logger.debug(`通过类级别注解识别为实体类: @${a}`),!0;for(const a of e.FIELD_ANNOTATIONS)if(t.includes(`@${a}`))return Logger.debug(`通过字段注解识别为实体类: @${a}`),!0;const a=/public\s+\w+\s+get\w+\s*\(/.test(t),s=/public\s+void\s+set\w+\s*\(/.test(t);if(a&&s)return Logger.debug("通过getter/setter方法识别为实体类"),!0;if(/private\s+\w+\s+\w+\s*;/.test(t))return Logger.debug("通过私有字段识别为潜在实体类"),!0;const r=t.match(/(?:public\s+)?class\s+(\w+)/);if(r){const e=r[1],t=[/Entity$/i,/Model$/i,/DO$/i,/DTO$/i,/VO$/i,/PO$/i,/Bean$/i];for(const a of t)if(a.test(e))return Logger.debug(`通过类名模式识别为实体类: ${e}`),!0}const n=t.match(/package\s+([\w.]+)\s*;/);if(n){const e=n[1].toLowerCase(),t=["entity","model","domain","pojo","bean","dto","vo","po"];for(const a of t)if(e.includes(a))return Logger.debug(`通过包名识别为实体类: ${e}`),!0}if(t.includes("implements Serializable")||t.includes("extends Serializable"))return Logger.debug("通过Serializable接口识别为实体类"),!0;const o=["javax.persistence","com.baomidou.mybatisplus","org.springframework.data.jpa","lombok.Data","lombok.Entity"];for(const e of o)if(t.includes(`import ${e}`))return Logger.debug(`通过导入语句识别为实体类: ${e}`),!0;const i=(t.match(/private\s+\w+\s+\w+\s*;/g)||[]).length;if(i>=2){const e=[/Util$/i,/Utils$/i,/Helper$/i,/Config$/i,/Configuration$/i,/Constants?$/i,/Factory$/i,/Builder$/i,/Manager$/i,/Service$/i,/Controller$/i,/Repository$/i,/Dao$/i];let t=!1;if(r){const a=r[1];for(const s of e)if(s.test(a)){t=!0;break}}if(!t)return Logger.debug(`通过字段数量识别为潜在实体类: ${i}个字段`),!0}return Logger.debug("未识别为实体类，将跳过解析"),!1}extractClassAnnotations(e){const t=[],a=e.match(/((?:@\w+(?:\([^)]*\))?\s*)*)\s*(?:public\s+)?class\s+\w+/);if(!a)return t;const s=a[1].matchAll(/@(\w+)(?:\(([^)]*)\))?/g);for(const e of s){const a=e[1],s=e[2]||"",r=this.parseAnnotationAttributes(s);t.push({name:a,attributes:r,rawText:e[0]})}return t}extractTableName(e,t,a){const s=a.find((e=>"Table"===e.name));if(s&&s.attributes.name)return s.attributes.name;const r=a.find((e=>"TableName"===e.name));return r&&r.attributes.value?r.attributes.value:this.camelToSnakeCase(t)}extractFields(e,t){const a=[],s=/((?:@\w+(?:\([^)]*\))?\s*)*)\s*(?:private|protected|public)?\s+(\w+(?:<[^>]+>)?)\s+(\w+)\s*;/g;let r;for(;null!==(r=s.exec(e));){const t=r[1],s=r[2],n=r[3];if(e.includes(`static ${s} ${n}`)||e.includes(`final ${s} ${n}`))continue;const o=this.parseFieldAnnotations(t),i=this.extractColumnName(n,o),l=this.isPrimaryKey(o),c=this.isForeignKey(n,o),d=this.isNullable(o),u=this.mapJavaTypeToDbType(s);a.push({name:n,javaType:s,columnName:i,dbType:u,isPrimaryKey:l,isForeignKey:c,nullable:d,annotations:o})}return a}parseFieldAnnotations(e){const t=[],a=e.matchAll(/@(\w+)(?:\(([^)]*)\))?/g);for(const e of a){const a=e[1],s=e[2]||"",r=this.parseAnnotationAttributes(s);t.push({name:a,attributes:r,rawText:e[0]})}return t}parseAnnotationAttributes(e){const t={};if(!e.trim())return t;if(!e.includes("="))return t.value=this.parseAttributeValue(e.trim()),t;const a=e.split(",");for(const e of a){const[a,s]=e.split("=").map((e=>e.trim()));a&&s&&(t[a]=this.parseAttributeValue(s))}return t}parseAttributeValue(e){return(e=e.trim()).startsWith('"')&&e.endsWith('"')||e.startsWith("'")&&e.endsWith("'")?e.slice(1,-1):"true"===e||"false"!==e&&(/^\d+$/.test(e)?parseInt(e,10):/^\d+\.\d+$/.test(e)?parseFloat(e):e)}extractColumnName(e,t){const a=t.find((e=>"Column"===e.name));if(a&&a.attributes.name)return a.attributes.name;const s=t.find((e=>"TableField"===e.name));return s&&s.attributes.value?s.attributes.value:this.camelToSnakeCase(e)}isPrimaryKey(e){return e.some((e=>"Id"===e.name||"TableId"===e.name))}isForeignKey(e,t){if(t.some((e=>"JoinColumn"===e.name)))return!0;const a=["OneToOne","OneToMany","ManyToOne","ManyToMany"];return!!t.some((e=>a.includes(e.name)))||!(!e.endsWith("Id")||"id"===e)}isNullable(e){const t=e.find((e=>"Column"===e.name));return!t||void 0===t.attributes.nullable||t.attributes.nullable}async parseJavaFileWithRegex(e,t,a){try{let s=t;a.includeComments||(s=this.removeComments(t));const r=this.extractPackageName(s),n=this.extractClassName(s);if(!n)return Logger.warn(`无法提取类名: ${e}`),null;if(!this.isEntityClass(s))return Logger.debug(`非实体类，跳过: ${n}`),null;const o=this.extractClassAnnotations(s),i=this.extractTableName(s,n,o);return{className:n,packageName:r||"",tableName:i,fields:this.extractFields(s,a),annotations:o,filePath:e,isEntity:!0,parseMethod:"regex",confidence:.7}}catch(t){throw Logger.error(`正则解析Java文件失败: ${e}`,t),t}}mergeParseResults(e,t){const a={...e};a.fields=a.fields.map((e=>{const a=t.fields.find((t=>t.name===e.name));return a?{...e,columnName:a.columnName||e.columnName,isPrimaryKey:a.isPrimaryKey||e.isPrimaryKey,isForeignKey:a.isForeignKey||e.isForeignKey,annotations:this.mergeAnnotations(e.annotations,a.annotations)}:e}));const s=new Set(a.fields.map((e=>e.name))),r=t.fields.filter((e=>!s.has(e.name)));return a.fields.push(...r),a.annotations=this.mergeAnnotations(a.annotations,t.annotations),t.tableName&&t.tableName!==this.camelToSnakeCase(t.className)&&(a.tableName=t.tableName),a}mergeAnnotations(e,t){const a=[...e],s=new Set(e.map((e=>e.name)));for(const e of t)s.has(e.name)||a.push(e);return a}clearCache(){this.cache.clear()}getParseStats(e){const t=e.length;return{total:t,lspParsed:e.filter((e=>"lsp"===e.parseMethod)).length,regexParsed:e.filter((e=>"regex"===e.parseMethod)).length,hybridParsed:e.filter((e=>"hybrid"===e.parseMethod)).length,averageConfidence:t>0?e.reduce(((e,t)=>e+t.confidence),0)/t:0}}getParserStatus(){const e=this.lspParser.getJavaExtensionStatus();let t="regex",a="";return isWorkerThread?(t="regex",a="当前在Worker线程中，自动使用正则解析策略"):vscode?e?(t="hybrid",a="Java扩展可用，推荐使用混合解析策略获得最佳效果"):(t="regex",a='Java扩展不可用，建议安装 "Language Support for Java(TM) by Red Hat" 以获得更好效果'):(t="regex",a="VS Code API不可用，使用正则解析策略"),{isWorkerThread,vscodeApiAvailable:!!vscode,javaExtensionAvailable:e,recommendedStrategy:t,statusMessage:a}}validateEntity(e){const t=[];return e.className||t.push("缺少类名"),e.tableName||t.push("缺少表名"),0===e.fields.length&&t.push("没有找到字段"),e.fields.some((e=>e.isPrimaryKey))||t.push("没有找到主键字段"),{valid:0===t.length,errors:t}}mapJavaTypeToDbType(t){const a=t.replace(/<[^>]+>/g,"");return e.TYPE_MAPPINGS[a]||"VARCHAR"}camelToSnakeCase(e){return e.replace(/([A-Z])/g,"_$1").toLowerCase().replace(/^_/,"")}};_SmartJavaParser.ENTITY_ANNOTATIONS=["Entity","Table","TableName","Data","Component"],_SmartJavaParser.FIELD_ANNOTATIONS=["Id","Column","TableId","TableField","JoinColumn","OneToOne","OneToMany","ManyToOne","ManyToMany"],_SmartJavaParser.TYPE_MAPPINGS={String:"VARCHAR",Integer:"INT",int:"INT",Long:"BIGINT",long:"BIGINT",Double:"DOUBLE",double:"DOUBLE",Float:"FLOAT",float:"FLOAT",Boolean:"BOOLEAN",boolean:"BOOLEAN",Date:"DATETIME",LocalDate:"DATE",LocalDateTime:"DATETIME",LocalTime:"TIME",BigDecimal:"DECIMAL","byte[]":"BLOB","Byte[]":"BLOB"};let SmartJavaParser=_SmartJavaParser}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var a=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](a,a.exports,__webpack_require__),a.exports}__webpack_require__.d=(e,t)=>{for(var a in t)__webpack_require__.o(t,a)&&!__webpack_require__.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var __webpack_exports__={},external_worker_threads_=__webpack_require__(167),WorkerMessageType=(e=>(e.PARSE_JAVA_FILE="PARSE_JAVA_FILE",e.PARSE_XML_FILE="PARSE_XML_FILE",e.PARSE_BATCH_FILES="PARSE_BATCH_FILES",e.INFER_RELATIONS="INFER_RELATIONS",e.VALIDATE_RELATIONS="VALIDATE_RELATIONS",e.GENERATE_DIAGRAM="GENERATE_DIAGRAM",e.EXPORT_DIAGRAM="EXPORT_DIAGRAM",e.PING="PING",e.PONG="PONG",e.TERMINATE="TERMINATE",e.ERROR="ERROR",e.PROGRESS="PROGRESS",e))(WorkerMessageType||{}),WorkerStatus=(e=>(e.IDLE="idle",e.BUSY="busy",e.ERROR="error",e.TERMINATED="terminated",e))(WorkerStatus||{}),WorkerErrorType=(e=>(e.TIMEOUT="timeout",e.PARSE_ERROR="parse_error",e.MEMORY_ERROR="memory_error",e.NETWORK_ERROR="network_error",e.VALIDATION_ERROR="validation_error",e.UNKNOWN_ERROR="unknown_error",e))(WorkerErrorType||{}),WorkerEventType=(e=>(e.WORKER_CREATED="worker_created",e.WORKER_TERMINATED="worker_terminated",e.TASK_STARTED="task_started",e.TASK_COMPLETED="task_completed",e.TASK_FAILED="task_failed",e.QUEUE_FULL="queue_full",e.PERFORMANCE_WARNING="performance_warning",e))(WorkerEventType||{}),java_parser=__webpack_require__(531);const Logger={debug:(e,...t)=>console.log(`[DEBUG] ${e}`,...t),info:(e,...t)=>console.log(`[INFO] ${e}`,...t),warn:(e,...t)=>console.warn(`[WARN] ${e}`,...t),error:(e,t)=>console.error(`[ERROR] ${e}`,t)};class SmartXmlParser{async parseXmlFile(e,t,a={}){const s={parseSql:!0,extractRelations:!0,parseResultMaps:!0,maxFileSize:10485760,...a};try{if(Logger.debug(`开始解析XML文件: ${e}`),t.length>s.maxFileSize)throw new Error(`文件过大: ${t.length} bytes`);if(!this.isMyBatisMapperFile(t))return Logger.debug(`非MyBatis映射文件，跳过: ${e}`),null;const a=this.extractNamespace(t);if(!a)return Logger.warn(`无法提取命名空间: ${e}`),null;const r=this.extractMappings(t,e,s),n=s.parseResultMaps?this.extractResultMaps(t):[],o=s.extractRelations?this.extractRelations(t,r,n):[];return Logger.debug(`XML文件解析完成: ${a}, 映射数: ${r.length}, 关系数: ${o.length}`),{namespace:a,mappings:r,relations:o,resultMaps:n}}catch(t){throw Logger.error(`解析XML文件失败: ${e}`,t),t}}async parseXmlFiles(e,t={}){const a=[];for(const s of e)try{const e=await this.parseXmlFile(s.filePath,s.content,t);e&&a.push(e)}catch(e){Logger.warn(`跳过解析失败的文件: ${s.filePath}`,e)}return a}isMyBatisMapperFile(e){return e.includes("<mapper")&&e.includes("namespace=")}extractNamespace(e){const t=e.match(/namespace\s*=\s*["']([^"']+)["']/);return t?t[1]:null}extractMappings(e,t,a){const s=[],r=["select","insert","update","delete","resultMap"];for(const n of r){const r=new RegExp(`<${n}[^>]*>([\\s\\S]*?)</${n}>`,"gi");let o;for(;null!==(o=r.exec(e));){const e=o[0],r=o[1],i=this.extractAttribute(e,"id");if(!i)continue;const l={id:i,type:n,filePath:t};"resultMap"!==n&&(l.resultType=this.extractAttribute(e,"resultType"),l.resultMap=this.extractAttribute(e,"resultMap"),l.parameterType=this.extractAttribute(e,"parameterType"),a.parseSql&&(l.sql=this.extractSql(r))),s.push(l)}}return s}extractResultMaps(e){const t=[],a=/<resultMap[^>]*>([\s\S]*?)<\/resultMap>/gi;let s;for(;null!==(s=a.exec(e));){const e=s[0],a=s[1],r=this.extractAttribute(e,"id"),n=this.extractAttribute(e,"type");if(!r||!n)continue;const o={id:r,type:n,fieldMappings:this.extractFieldMappings(a),associations:this.extractAssociations(a),collections:this.extractCollections(a)};t.push(o)}return t}extractFieldMappings(e){const t=[],a=[/<id\s+([^>]*?)\/?>|<id\s+([^>]*?)>[\s\S]*?<\/id>/gi,/<result\s+([^>]*?)\/?>|<result\s+([^>]*?)>[\s\S]*?<\/result>/gi];for(let s=0;s<a.length;s++){const r=a[s],n=0===s;let o;for(;null!==(o=r.exec(e));){const e=o[1]||o[2],a=this.extractAttribute(e,"property"),s=this.extractAttribute(e,"column");a&&s&&t.push({property:a,column:s,javaType:this.extractAttribute(e,"javaType"),jdbcType:this.extractAttribute(e,"jdbcType"),isId:n})}}return t}extractAssociations(e){const t=[],a=/<association\s+([^>]*?)(?:\/>|>([\s\S]*?)<\/association>)/gi;let s;for(;null!==(s=a.exec(e));){const e=s[1],a=this.extractAttribute(e,"property"),r=this.extractAttribute(e,"javaType");a&&r&&t.push({property:a,javaType:r,column:this.extractAttribute(e,"column"),resultMap:this.extractAttribute(e,"resultMap"),select:this.extractAttribute(e,"select")})}return t}extractCollections(e){const t=[],a=/<collection\s+([^>]*?)(?:\/>|>([\s\S]*?)<\/collection>)/gi;let s;for(;null!==(s=a.exec(e));){const e=s[1],a=this.extractAttribute(e,"property"),r=this.extractAttribute(e,"ofType");a&&r&&t.push({property:a,ofType:r,column:this.extractAttribute(e,"column"),resultMap:this.extractAttribute(e,"resultMap"),select:this.extractAttribute(e,"select")})}return t}extractRelations(e,t,a){const s=[];return s.push(...this.extractRelationsFromResultMaps(a)),s.push(...this.extractRelationsFromSql(t)),s}extractRelationsFromResultMaps(e){const t=[];for(const a of e){const e=this.inferTableNameFromType(a.type);for(const s of a.associations){const r=this.inferTableNameFromType(s.javaType);t.push({id:`${a.id}_${s.property}`,sourceTable:e,targetTable:r,type:"many-to-one",foreignKey:s.column,confidence:.8,source:"association"})}for(const s of a.collections){const r=this.inferTableNameFromType(s.ofType);t.push({id:`${a.id}_${s.property}`,sourceTable:e,targetTable:r,type:"one-to-many",foreignKey:s.column,confidence:.8,source:"collection"})}}return t}extractRelationsFromSql(e){const t=[];for(const a of e){if(!a.sql)continue;const e=this.extractJoinRelations(a.sql,a.id);t.push(...e)}return t}extractJoinRelations(e,t){const a=[],s=e.replace(/\s+/g," ").trim().toUpperCase(),r=/(LEFT|RIGHT|INNER|FULL)?\s*JOIN\s+(\w+)\s+(?:AS\s+)?(\w+)?\s+ON\s+([\w.]+)\s*=\s*([\w.]+)/gi;let n;for(;null!==(n=r.exec(s));){const e=n[1]||"INNER",r=n[2],o=(n[3],n[4]),i=n[5],l=this.inferSourceTableFromSql(s);l&&r&&a.push({id:`${t}_join_${r}`,sourceTable:l,targetTable:r,type:this.inferRelationTypeFromJoin(e),joinCondition:`${o} = ${i}`,confidence:.7,source:"join"})}return a}extractAttribute(e,t){const a=new RegExp(`${t}\\s*=\\s*["']([^"']+)["']`,"i"),s=e.match(a);return s?s[1]:null}extractSql(e){let t=e.replace(/<!\[CDATA\[([\s\S]*?)\]\]>/g,"$1");return t=t.replace(/<!--[\s\S]*?-->/g,""),t=t.replace(/\s+/g," ").trim(),t}inferTableNameFromType(e){return(e.split(".").pop()||e).replace(/([A-Z])/g,"_$1").toLowerCase().replace(/^_/,"")}inferSourceTableFromSql(e){const t=e.match(/FROM\s+(\w+)/i);return t?t[1]:null}inferRelationTypeFromJoin(e){switch(e.toUpperCase()){case"LEFT":case"LEFT OUTER":return"one-to-many";default:return"many-to-one"}}validateXmlResult(e){const t=[];e.namespace||t.push("缺少命名空间"),0===e.mappings.length&&t.push("没有找到映射语句");for(const a of e.mappings)a.id||t.push(`映射语句缺少ID: ${a.type}`);return{valid:0===t.length,errors:t}}}SmartXmlParser.SQL_KEYWORDS=["SELECT","FROM","WHERE","JOIN","INNER JOIN","LEFT JOIN","RIGHT JOIN","FULL JOIN","ON","AND","OR","GROUP BY","ORDER BY","HAVING","UNION"];const relation_inference_Logger={debug:(e,...t)=>console.log(`[DEBUG] ${e}`,...t),info:(e,...t)=>console.log(`[INFO] ${e}`,...t),warn:(e,...t)=>console.warn(`[WARN] ${e}`,...t),error:(e,t)=>console.error(`[ERROR] ${e}`,t)},_RelationInferenceEngine=class e{async inferRelations(t,a=[],s={}){const r={strategies:e.DEFAULT_STRATEGIES,minConfidence:.6,mergeSimilarRelations:!0,inferReverseRelations:!0,...s};try{relation_inference_Logger.debug(`开始推断关系，实体数: ${t.length}, XML结果数: ${a.length}`);const e=[];if(this.isStrategyEnabled("naming-convention",r.strategies)){const a=await this.inferByNamingConvention(t,r);e.push(...a)}if(this.isStrategyEnabled("annotation-based",r.strategies)){const a=await this.inferByAnnotations(t,r);e.push(...a)}if(this.isStrategyEnabled("xml-mapping",r.strategies)){const s=await this.inferByXmlMapping(t,a,r);e.push(...s)}if(this.isStrategyEnabled("field-type-analysis",r.strategies)){const a=await this.inferByFieldTypeAnalysis(t,r);e.push(...a)}const s=e.filter((e=>e.confidence>=r.minConfidence)),n=r.mergeSimilarRelations?this.mergeSimilarRelations(s):s,o=r.inferReverseRelations?this.inferReverseRelations(n):n;return relation_inference_Logger.debug(`关系推断完成，发现关系数: ${o.length}`),o}catch(e){throw relation_inference_Logger.error("关系推断失败",e),e}}async inferByNamingConvention(e,t){const a=[],s=this.getStrategy("naming-convention",t.strategies);if(!s)return a;for(const t of e)for(const r of t.fields)if(this.isForeignKeyByNaming(r)){const n=this.inferTargetTableFromFieldName(r.name),o=e.find((e=>e.tableName===n||this.normalizeTableName(e.className)===n));if(o){const e=this.calculateNamingConfidence(r,o);e>=s.minConfidence&&a.push({id:`naming_${t.tableName}_${o.tableName}_${r.name}`,sourceTable:t.tableName,targetTable:o.tableName,sourceField:r.name,targetField:"id",type:"many-to-one",confidence:e*s.weight,strategy:"naming-convention",evidence:[`字段名 ${r.name} 符合外键命名约定`,`推断目标表: ${o.tableName}`],bidirectional:!1})}}return a}async inferByAnnotations(e,t){const a=[],s=this.getStrategy("annotation-based",t.strategies);if(!s)return a;for(const t of e)for(const r of t.fields){const n=r.annotations.filter((e=>["OneToOne","OneToMany","ManyToOne","ManyToMany","JoinColumn"].includes(e.name)));for(const o of n){const n=this.mapAnnotationToRelationType(o.name);if(n){const i=this.findTargetEntityByType(e,r.javaType);if(i){const e=this.calculateAnnotationConfidence(o,r);e>=s.minConfidence&&a.push({id:`annotation_${t.tableName}_${i.tableName}_${r.name}`,sourceTable:t.tableName,targetTable:i.tableName,sourceField:r.name,targetField:this.inferTargetField(o,i),type:n,confidence:e*s.weight,strategy:"annotation-based",evidence:[`注解 @${o.name} 明确指定关系类型`,`字段类型: ${r.javaType}`],bidirectional:!1})}}}}return a}async inferByXmlMapping(e,t,a){const s=[],r=this.getStrategy("xml-mapping",a.strategies);if(!r)return s;for(const a of t)if(a.relations)for(const t of a.relations){const a=e.find((e=>e.tableName===t.sourceTable||this.normalizeTableName(e.className)===t.sourceTable)),n=e.find((e=>e.tableName===t.targetTable||this.normalizeTableName(e.className)===t.targetTable));if(a&&n){const e=this.calculateXmlConfidence(t);e>=r.minConfidence&&s.push({id:`xml_${t.id}`,sourceTable:a.tableName,targetTable:n.tableName,sourceField:t.foreignKey,targetField:"id",type:t.type,confidence:e*r.weight,strategy:"xml-mapping",evidence:["XML映射文件中明确定义的关系",`来源: ${t.source}`,t.joinCondition?`连接条件: ${t.joinCondition}`:""].filter(Boolean),bidirectional:!1})}}return s}async inferByFieldTypeAnalysis(e,t){const a=[],s=this.getStrategy("field-type-analysis",t.strategies);if(!s)return a;for(const t of e)for(const r of t.fields){const n=this.findTargetEntityByType(e,r.javaType);if(n&&n!==t){const e=this.calculateTypeAnalysisConfidence(r,n);e>=s.minConfidence&&a.push({id:`type_${t.tableName}_${n.tableName}_${r.name}`,sourceTable:t.tableName,targetTable:n.tableName,sourceField:r.name,targetField:"id",type:this.inferRelationTypeFromField(r),confidence:e*s.weight,strategy:"field-type-analysis",evidence:[`字段类型 ${r.javaType} 对应实体 ${n.className}`,"推断为对象引用关系"],bidirectional:!1})}}return a}isStrategyEnabled(e,t){const a=t.find((t=>t.name===e));return!!a&&a.enabled}getStrategy(e,t){return t.find((t=>t.name===e))||null}isForeignKeyByNaming(e){const t=e.name.toLowerCase();return!(!t.endsWith("id")||e.isPrimaryKey||"id"===t)||["_id","Id","_key","Key"].some((t=>e.name.includes(t)))}inferTargetTableFromFieldName(e){let t=e.replace(/Id$/,"").replace(/_id$/,"");return this.normalizeTableName(t)}normalizeTableName(e){return e.replace(/([A-Z])/g,"_$1").toLowerCase().replace(/^_/,"")}calculateNamingConfidence(e,t){let a=.5;const s=t.className.toLowerCase()+"Id";return e.name.toLowerCase()===s&&(a+=.3),["Long","Integer","long","int"].includes(e.javaType)&&(a+=.2),Math.min(a,1)}mapAnnotationToRelationType(e){switch(e){case"OneToOne":return"one-to-one";case"OneToMany":return"one-to-many";case"ManyToOne":return"many-to-one";case"ManyToMany":return"many-to-many";default:return null}}findTargetEntityByType(e,t){const a=t.replace(/<[^>]+>/g,"").split(".").pop()||t;return e.find((e=>e.className===a))||null}calculateAnnotationConfidence(e,t){let a=.8;return"JoinColumn"===e.name&&(a+=.1),Math.min(a,1)}inferTargetField(e,t){if(e.attributes&&e.attributes.referencedColumnName)return e.attributes.referencedColumnName;const a=t.fields.find((e=>e.isPrimaryKey));return a?a.columnName:"id"}calculateXmlConfidence(e){return e.confidence||.7}calculateTypeAnalysisConfidence(e,t){let a=.6;return e.name.toLowerCase().includes(t.className.toLowerCase())&&(a+=.2),Math.min(a,1)}inferRelationTypeFromField(e){return e.javaType.includes("List")||e.javaType.includes("Set")?"one-to-many":"many-to-one"}mergeSimilarRelations(e){const t=[],a=new Set;for(const s of e){const r=`${s.sourceTable}_${s.targetTable}_${s.sourceField}`;if(a.has(r))continue;const n=e.filter((e=>e.sourceTable===s.sourceTable&&e.targetTable===s.targetTable&&e.sourceField===s.sourceField&&!a.has(`${e.sourceTable}_${e.targetTable}_${e.sourceField}`)));if(n.length>1){const e=n.reduce(((e,t)=>t.confidence>e.confidence?t:e));e.evidence=Array.from(new Set(n.flatMap((e=>e.evidence)))),t.push(e),n.forEach((e=>a.add(`${e.sourceTable}_${e.targetTable}_${e.sourceField}`)))}else t.push(s),a.add(r)}return t}inferReverseRelations(e){const t=[...e];for(const a of e)if(!e.some((e=>e.sourceTable===a.targetTable&&e.targetTable===a.sourceTable))&&"many-to-many"!==a.type){const e=this.getReverseRelationType(a.type);e&&t.push({id:`reverse_${a.id}`,sourceTable:a.targetTable,targetTable:a.sourceTable,sourceField:a.targetField,targetField:a.sourceField,type:e,confidence:.8*a.confidence,strategy:`reverse-${a.strategy}`,evidence:[`基于 ${a.strategy} 推断的反向关系`],bidirectional:!0})}return t}getReverseRelationType(e){switch(e){case"one-to-many":return"many-to-one";case"many-to-one":return"one-to-many";case"one-to-one":return"one-to-one";default:return null}}validateInferenceResult(e){const t=[];for(const a of e)a.sourceTable&&a.targetTable||t.push(`关系缺少源表或目标表: ${a.id}`),(a.confidence<0||a.confidence>1)&&t.push(`关系置信度超出范围 [0,1]: ${a.id}`),a.strategy||t.push(`关系缺少推断策略: ${a.id}`);return{valid:0===t.length,errors:t}}};_RelationInferenceEngine.DEFAULT_STRATEGIES=[{name:"naming-convention",weight:.8,enabled:!0,minConfidence:.6},{name:"annotation-based",weight:.9,enabled:!0,minConfidence:.7},{name:"xml-mapping",weight:.85,enabled:!0,minConfidence:.75},{name:"field-type-analysis",weight:.7,enabled:!0,minConfidence:.5}];let RelationInferenceEngine=_RelationInferenceEngine;class WorkerThread{constructor(){this.isTerminating=!1,this.processedTasks=0,this.startTime=Date.now(),this.workerId=external_worker_threads_.workerData.workerId,this.config=external_worker_threads_.workerData.config,this.javaParser=new java_parser.J,this.xmlParser=new SmartXmlParser,this.relationInference=new RelationInferenceEngine,this.setupMessageHandling(),this.sendMessage({id:this.generateMessageId(),type:WorkerMessageType.PONG,payload:{workerId:this.workerId,startTime:this.startTime},timestamp:Date.now(),isResponse:!0})}setupMessageHandling(){if(!external_worker_threads_.parentPort)throw new Error("Worker must be run in worker_threads context");external_worker_threads_.parentPort.on("message",(async e=>{if(!this.isTerminating)try{await this.handleMessage(e)}catch(t){this.sendError(t,e.id)}})),external_worker_threads_.parentPort.on("error",(e=>{this.sendError(e)})),setInterval((()=>{global.gc&&global.gc()}),3e4)}async handleMessage(e){const t=Date.now();try{let a;switch(e.type){case WorkerMessageType.PING:a=await this.handlePing(e);break;case WorkerMessageType.PARSE_JAVA_FILE:a=await this.handleParseJavaFile(e);break;case WorkerMessageType.PARSE_XML_FILE:a=await this.handleParseXmlFile(e);break;case WorkerMessageType.PARSE_BATCH_FILES:a=await this.handleBatchParse(e);break;case WorkerMessageType.INFER_RELATIONS:a=await this.handleInferRelations(e);break;case WorkerMessageType.VALIDATE_RELATIONS:a=await this.handleValidateRelations(e);break;case WorkerMessageType.GENERATE_DIAGRAM:a=await this.handleGenerateDiagram(e);break;case WorkerMessageType.EXPORT_DIAGRAM:a=await this.handleExportDiagram(e);break;case WorkerMessageType.TERMINATE:return void await this.handleTerminate();default:throw new Error(`Unknown message type: ${e.type}`)}this.processedTasks++,this.sendResponse(e.id,{success:!0,data:a,processingTime:Date.now()-t,workerStats:{processedTasks:this.processedTasks,uptime:Date.now()-this.startTime,memoryUsage:process.memoryUsage()}})}catch(a){this.sendResponse(e.id,{success:!1,error:a.message,processingTime:Date.now()-t,workerStats:{processedTasks:this.processedTasks,uptime:Date.now()-this.startTime,memoryUsage:process.memoryUsage()}})}}async handlePing(e){return{workerId:this.workerId,timestamp:Date.now(),uptime:Date.now()-this.startTime,processedTasks:this.processedTasks,memoryUsage:process.memoryUsage(),status:"healthy"}}async handleParseJavaFile(e){const t=e.payload;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:"开始解析Java文件",processed:0,total:1});const a=await this.parseJavaFileContent(t);return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:"解析完成",processed:1,total:1}),a}async handleParseXmlFile(e){const t=e.payload;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:"开始解析XML文件",processed:0,total:1});const a=await this.parseXmlFileContent(t);return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:"解析完成",processed:1,total:1}),a}async handleBatchParse(e){const t=e.payload,a=[],s=t.files.length;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:`开始批量解析${s}个文件`,processed:0,total:s});const r=t.files.filter((e=>"java"===e.fileType)),n=t.files.filter((e=>"xml"===e.fileType));let o=0;if(r.length>0){this.sendProgress(e.id,{taskId:e.id,percentage:Math.floor(100*o/s),message:`处理${r.length}个Java文件...`,processed:o,total:s});for(const t of r)try{const r=await this.parseJavaFileContent(t);a.push(r),o++,o%5!=0&&o!==s||this.sendProgress(e.id,{taskId:e.id,percentage:Math.floor(100*o/s),message:`已处理 ${o}/${s} 个文件`,processed:o,total:s})}catch(e){console.warn(`批量解析Java文件失败: ${t.filePath}`,e),a.push({filePath:t.filePath,error:e.message,success:!1}),o++}}if(n.length>0){this.sendProgress(e.id,{taskId:e.id,percentage:Math.floor(100*o/s),message:`处理${n.length}个XML文件...`,processed:o,total:s});for(const t of n)try{const r=await this.parseXmlFileContent(t);a.push(r),o++,o%5!=0&&o!==s||this.sendProgress(e.id,{taskId:e.id,percentage:Math.floor(100*o/s),message:`已处理 ${o}/${s} 个文件`,processed:o,total:s})}catch(e){console.warn(`批量解析XML文件失败: ${t.filePath}`,e),a.push({filePath:t.filePath,error:e.message,success:!1}),o++}}return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:`批量解析完成，成功处理${a.filter((e=>!1!==e.success)).length}个文件`,processed:s,total:s}),a}async handleInferRelations(e){const t=e.payload;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:"开始推断实体关系",processed:0,total:1});try{const a=await this.inferEntityRelations(t);return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:`关系推断完成，发现${a.relations?.length||0}个关系`,processed:1,total:1}),a}catch(e){return console.warn("关系推断失败",e),{relations:[],confidence:0,error:e.message}}}async handleValidateRelations(e){const t=e.payload;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:"开始关系验证",processed:0,total:1});const a=await this.validateEntityRelations(t);return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:"关系验证完成",processed:1,total:1}),a}async handleGenerateDiagram(e){const t=e.payload;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:"开始生成ER图",processed:0,total:1});const a=await this.generateDiagramContent(t);return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:"ER图生成完成",processed:1,total:1}),a}async handleExportDiagram(e){const t=e.payload;this.sendProgress(e.id,{taskId:e.id,percentage:0,message:"开始导出图表",processed:0,total:1});const a=await this.exportDiagramContent(t);return this.sendProgress(e.id,{taskId:e.id,percentage:100,message:"图表导出完成",processed:1,total:1}),a}async handleTerminate(){this.isTerminating=!0,this.sendMessage({id:this.generateMessageId(),type:WorkerMessageType.PONG,payload:{workerId:this.workerId,terminating:!0,finalStats:{processedTasks:this.processedTasks,uptime:Date.now()-this.startTime,memoryUsage:process.memoryUsage()}},timestamp:Date.now(),isResponse:!0}),await this.cleanup(),setTimeout((()=>{process.exit(0)}),100)}async parseJavaFileContent(e){try{const t=await this.javaParser.parseJavaFile(e.filePath,e.content,e.options);return{filePath:e.filePath,fileType:"java",entity:t,parseTime:Date.now()}}catch(e){throw new Error(`Java文件解析失败: ${e}`)}}async parseXmlFileContent(e){try{const t=await this.xmlParser.parseXmlFile(e.filePath,e.content,e.options);return{filePath:e.filePath,fileType:"xml",result:t,parseTime:Date.now()}}catch(e){throw new Error(`XML文件解析失败: ${e}`)}}async inferEntityRelations(e){try{const{entities:t,mappings:a=[],strategies:s,minConfidence:r=.6}=e,n=await this.relationInference.inferRelations(t,a,{minConfidence:r,mergeSimilarRelations:!0,inferReverseRelations:!0});return{relations:n,confidence:n.length>0?n.reduce(((e,t)=>e+t.confidence),0)/n.length:0,totalRelations:n.length}}catch(e){return console.warn("实体关系推断失败",e),{relations:[],confidence:0,error:e.message}}}async validateEntityRelations(e){return{valid:!0,validatedRelations:e.relations||[],validationErrors:[],validationTime:Date.now()}}async generateDiagramContent(e){return{format:e.options.format,content:"\n                erDiagram\n                    User {\n                        int id\n                        string name\n                        string email\n                    }\n                    Order {\n                        int id\n                        int user_id\n                        decimal amount\n                    }\n                    User ||--o{ Order : has\n            ",metadata:{entityCount:e.entities.length,relationCount:e.relations.length,theme:e.options.theme},generationTime:Date.now()}}async exportDiagramContent(e){return{exportPath:e.exportPath,format:e.format,size:1024,exportTime:Date.now()}}sendResponse(e,t){this.sendMessage({id:this.generateMessageId(),type:WorkerMessageType.PONG,payload:t,timestamp:Date.now(),isResponse:!0,responseToId:e})}sendProgress(e,t){this.sendMessage({id:this.generateMessageId(),type:WorkerMessageType.PROGRESS,payload:t,timestamp:Date.now()})}sendError(e,t){const a={type:WorkerErrorType.UNKNOWN_ERROR,message:e.message,stack:e.stack,taskId:t,workerId:this.workerId,timestamp:Date.now(),context:{memoryUsage:process.memoryUsage()}};this.sendMessage({id:this.generateMessageId(),type:WorkerMessageType.ERROR,payload:a,timestamp:Date.now()})}sendMessage(e){external_worker_threads_.parentPort&&!this.isTerminating&&external_worker_threads_.parentPort.postMessage(e)}async cleanup(){try{this.javaParser=null,this.xmlParser=null,this.relationInference=null,global.gc&&global.gc()}catch(e){console.warn("Worker cleanup failed",e)}}sleep(e){return new Promise((t=>setTimeout(t,e)))}generateMessageId(){return`msg_${this.workerId}_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}}new WorkerThread,module.exports=__webpack_exports__})();
//# sourceMappingURL=worker-thread.js.map